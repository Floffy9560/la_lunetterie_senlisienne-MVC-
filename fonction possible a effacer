<?php
/////////////////////////////////////////////////////////////////////////
/////////// essaie de requetes sql pour inserer des lunnettes ///////////
/////////////////////////////////////////////////////////////////////////

// Récuperer les diff marsues
function keepG()
{
      $pdo = getconnexion();
      $sql = "SELECT `brand` FROM `kghdsi_brands`;";
      $stmt = $pdo->prepare($sql);
      $stmt->execute();
      $brands = $stmt->fetchAll(PDO::FETCH_ASSOC);
      return $brands;
}

//fonction générale qui prend en paramètres la table sélectionné le nbr et le nom des colonnes ainsi que le nom des valeurs
function insertData($table, $columns, $values)
{
      // Connexion à la base de données
      $pdo = getConnexion();

      // Construction de la requête SQL dynamique en fonction de la table, des colonnes et des valeurs
      $columnStr = implode(", ", $columns);
      $valueStr = ":" . implode(", :", $columns);

      try {
            $stmt = $pdo->prepare("INSERT INTO $table ($columnStr) VALUES ($valueStr)");

            // Lier les paramètres dynamiquement
            foreach ($columns as $index => $column) {
                  $stmt->bindParam(":$column", $values[$index], PDO::PARAM_STR);
            }

            $stmt->execute();

            // Retourner l'ID du dernier élément inséré si nécessaire
            return $pdo->lastInsertId();
      } catch (PDOException $e) {
            echo "⚠️ Erreur insertion dans la table $table SQL : " . $e->getMessage();
            return false;
      }
}

//implenter un item

function addItem($name, $price, $stock)
{
      // Définir les colonnes et les valeurs à insérer
      $columns = ['name', 'price', 'stock'];
      $values = [$name, $price, $stock];

      // Appeler la fonction générique d'insertion
      return insertData('kghdsi_items', $columns, $values);
}


//implenter une paire de lunette

function addGlasses($color, $matter, $shape, $image_path, $image_name, $id_category, $id_gender, $id_brands, $id_items)
{
      // Définir les colonnes et les valeurs à insérer
      $columns = ['color', 'matter', 'shape', 'image_path', 'image_name', 'id_category', 'id_gender', 'id_brands', 'id_items'];
      $values = [$color, $matter, $shape, $image_path, $image_name, $id_category, $id_gender, $id_brands, $id_items];

      // Appeler la fonction générique d'insertion
      return insertData('kghdsi_glasses', $columns, $values);
}


$month = !empty($_GET['month']) ? intval($_GET['month']) : date('n');
$year = isset($_GET['year']) ? intval($_GET['year']) : date('Y');
$day = date("j");

$months = ['', 'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Aout', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];

$firstDayOfMonth = date('N', strtotime("$year-$month-01"));
$nbDaysOfMonth = cal_days_in_month(CAL_GREGORIAN, $month, $year);
$lastDayOfMonth = date('N', strtotime("$year-$month-$nbDaysOfMonth"));

$previousMonth = ($month == 1) ? 12 : $month - 1;
$previousYear = ($month == 1) ? $year - 1 : $year;
$nextMonth = ($month == 12) ? 1 : $month + 1;
$nextYear = ($month == 12) ? $year + 1 : $year;

$today = date('Y-m-d');


// Exemple de réservation pour le 7 mars 2025 à 15:00
// 1. Définir les horaires disponibles
$horairesDisponibles = [
      '10:00:00',
      '11:00:00',
      '12:00:00',
      '15:00:00',
      '16:00:00',
      '17:00:00'
];

function getAppointmentDate()
{
      //Connexion à la base de données
      $pdo = getConnexion();

      // Récupérer les réservations existantes pour une date donnée
      $today = date('Y-m-d');
      $dateChoisie = (!empty($_GET['date'])) ? $_GET['date'] : $today;
      try {
            $stmt = $pdo->prepare("SELECT appointmentTime FROM kghdsi_appointments WHERE appointmentDate = :date");
            $stmt->execute(['date' => $dateChoisie]);
            $reservations = $stmt->fetchAll(PDO::FETCH_COLUMN);
            return $reservations;
      } catch (PDOException $e) {
            echo "Erreur lors de la récupération des réservations : " . $e->getMessage();
            return false;
      }
}
function createAppointment($appointmentDate, $appointmentTime, $id_users)
{

      $pdo = getConnexion();

      try { // Insertion du moi , de l'année , et de l'heure dans la BDD
            $stmt = $pdo->prepare("INSERT INTO kghdsi_appointments ( appointmentDate, appointmentTime,id_users) VALUES (:appointmentDate, :appointmentTime,:id_users)");
            $stmt->bindparam(':appointmentDate', $appointmentDate, PDO::PARAM_STR);
            $stmt->bindparam(':appointmentTime', $appointmentTime, PDO::PARAM_STR);
            $stmt->bindparam(':id_users', $id_users, PDO::PARAM_INT);
            $stmt->execute();
            return true;
      } catch (PDOException $e) {

            return false;
      }
}
if (!empty($_GET["horaire"]) && !empty($_GET["appointmentDate"])) {
      $appointmentDate = $_GET["appointmentDate"];
      $appointmentTime = $_GET["horaire"];
      $id_users = $_SESSION['userInfos']['id_users'];
      if (createAppointment($appointmentDate, $appointmentTime, $id_users) == false) {
            echo "<div class='overlay'></div>
<div class='error'>
      <p>Erreur lors de la création du rendez-vous</p>
      <a href='agenda'>Retour sur la page prise de rendez-vous</a>
</div>";
      } else {
            echo "<div class='overlay'></div>
<div class='succes'>Votre RDV est bien enregister pour le " . $appointmentDate . ' à ' . $appointmentTime . "
      <a href='/'>Retour à l'acceuil</a>
</div>";
      }
}


function displayAppointment($id_users)
{

      $pdo = getConnexion();
      $sql = "SELECT appointmentDate, appointmentTime FROM kghdsi_appointments WHERE id_users = :id_users ORDER BY appointmentDate ASC, appointmentTime ASC";

      try {
            $stmt = $pdo->prepare($sql);
            $stmt->bindParam(':id_users', $id_users, PDO::PARAM_INT);
            $stmt->execute();
            $appointments = $stmt->fetchAll(PDO::FETCH_ASSOC);
            return $appointments;
      } catch (PDOException $e) {
            echo "Erreur lors de la récupération des rendez-vous : " . $e->getMessage();
            return false;
      }
}
// //------------------------------------------------------------------------------//
// //--- Récupération des cards présentes dans le localStorage (cardsDataCart) ---//
// //------------------------------------------------------------------------------//

// const body = document.getElementById("body");
// let storedCardsCart = JSON.parse(localStorage.getItem("cardsDataCart")) || [];
// let storedLens = JSON.parse(localStorage.getItem("lensData")) || [];

// body.innerHTML = "";

// // Cartes
// if (storedCardsCart.length > 0) {
//   storedCardsCart.forEach((card, index) => {
//     body.innerHTML += `
//       <div class="bodyCart" data-type="card" data-index="${index}">
//         <div class="secondColumn produits">
//           <div class="img">
//             <img src="${card.image}" alt="${card.name}">
//           </div>
//           <div class="article">
//             <span>Modèle : ${card.name}</span>
//           </div>
//           <div class="choiceQuantity">
//             <button class="less">-</button>
//             <p class="quantity">${card.quantity || 1}</p>
//             <button class="more">+</button>
//             <i class="bi bi-trash-fill trash" data-index="${index}"></i>
//           </div>
//         </div>
//         <div class="thirdColumn">
//           <p class="price" data-price="${card.price}">${
//       card.price * (card.quantity || 1)
//     } €</p>
//         </div>
//       </div>`;
//   });
// }

// // Lentilles
// if (storedLens.length > 0) {
//   storedLens.forEach((lens, index) => {
//     const pricePerUnit = 15;
//     const totalPriceLens = pricePerUnit * lens.quantity;

//     body.innerHTML += `
//       <div class="bodyCart" data-type="lens" data-index="${index}">
//         <div class="secondColumn produits">
//           <div class="img">
//             <img src="/assets/img/boite-lentille.png" alt="total one lens">
//           </div>
//           <div class="article">
//             <span>Correction OD : ${lens.correctionOD}</span>
//             <span>Correction OG : ${lens.correctionOG}</span>
//             <span>Modèle : Total one</span>
//           </div>
//           <div class="choiceQuantity">
//             <button class="less">-</button>
//             <p class="quantity">${lens.quantity}</p>
//             <button class="more">+</button>
//             <i class="bi bi-trash-fill trash" data-index="${index}"></i>
//           </div>
//         </div>
//         <div class="thirdColumn">
//           <p class="price" data-price="${pricePerUnit}">${totalPriceLens} €</p>
//         </div>
//       </div>`;
//   });
// }

// // Si panier vide
// if (storedLens.length === 0 && storedCardsCart.length === 0) {
//   body.innerHTML = `
//     <div class="emptyCart">
//       <p>🛒 Votre panier est vide, ajoutez des articles en cliquant sur 'Ajouter au panier'. 🛒</p>
//     </div>`;
// }

// //-----------------------------------------------------------------------------//
// //--------------------- GESTION INTERACTIVE DU PANIER ------------------------//
// //-----------------------------------------------------------------------------//

// setTimeout(() => {
//   const btnMore = document.querySelectorAll(".more");
//   const btnLess = document.querySelectorAll(".less");
//   const btnDeletes = document.querySelectorAll(".trash");
//   const total = document.getElementById("total");

//   const allQuantity = () => document.querySelectorAll(".quantity");
//   const allPrice = () => document.querySelectorAll(".price");

//   function totalPrice() {
//     let totalAmount = 0;
//     allPrice().forEach((price) => {
//       const current = parseFloat(price.textContent);
//       if (!isNaN(current)) totalAmount += current;
//     });
//     return totalAmount;
//   }

//   function totalItems() {
//     let totalQuantity = 0;
//     allQuantity().forEach((q) => {
//       const val = parseFloat(q.textContent);
//       if (!isNaN(val)) totalQuantity += val;
//     });
//     return totalQuantity;
//   }

//   function updateTotalDisplay() {
//     if (total) {
//       total.innerHTML = totalPrice() + " €";
//     }
//   }

//   // Fonction qui met à jour le nombre total d'articles dans le panier
//   function updateCartCountDisplay() {
//     const totalInCart = totalItems(); // On recalcul le nombre total d'articles
//     localStorage.setItem("totalInCart", JSON.stringify(totalInCart)); // Sauvegarder dans le localStorage

//     // Mettre à jour l'affichage du nombre d'articles dans le panier
//     const articleCountElements = document.querySelectorAll(
//       ".nbrArticle, .nbrArticleBurger"
//     );
//     articleCountElements.forEach((el) => (el.textContent = totalInCart));
//   }

//   function deleteArticle() {
//     btnDeletes.forEach((btnDelete) => {
//       btnDelete.addEventListener("click", (event) => {
//         const index = event.target.getAttribute("data-index");
//         const cartItem = event.target.closest(".bodyCart"); // Récupérer l'élément du panier

//         // Afficher la popup de confirmation avec SweetAlert2
//         Swal.fire({
//           title: "Voulez-vous vraiment supprimer cet article ?",
//           text: "L'article sera supprimé définitivement du panier.",
//           icon: "warning",
//           showCancelButton: true,
//           confirmButtonText: "Oui, supprimer",
//           cancelButtonText: "Annuler",
//           reverseButtons: true,
//         }).then((result) => {
//           if (result.isConfirmed) {
//             // Supprimer l'article des tableaux (selon le type)
//             if (cartItem.dataset.type === "card") {
//               storedCardsCart.splice(index, 1);
//             } else {
//               storedLens.splice(index, 1);
//             }

//             // Mettre à jour le localStorage
//             localStorage.setItem(
//               "cardsDataCart",
//               JSON.stringify(storedCardsCart)
//             );
//             localStorage.setItem("lensData", JSON.stringify(storedLens));

//             // Supprimer l'élément du DOM
//             cartItem.remove();

//             // Vérification si le panier est vide
//             if (storedCardsCart.length === 0 && storedLens.length === 0) {
//               body.innerHTML = `
//                 <div class="emptyCart">
//                   <p>🛒 Votre panier est vide, ajoutez des articles en cliquant sur 'Ajouter au panier'. 🛒</p>
//                 </div>`;
//             }

//             // Mettre à jour le nombre d'articles dans le panier
//             updateCartCountDisplay();

//             // Afficher une confirmation de suppression
//             Swal.fire(
//               "Supprimé !",
//               "L'article a été supprimé de votre panier.",
//               "success"
//             );
//           }
//         });
//       });
//     });
//   }
//   function updateStorage(type, index, quantity) {
//     if (type === "card") {
//       storedCardsCart[index].quantity = quantity;
//       localStorage.setItem("cardsDataCart", JSON.stringify(storedCardsCart));
//     } else {
//       storedLens[index].quantity = quantity;
//       localStorage.setItem("lensData", JSON.stringify(storedLens));
//     }
//   }

//   btnMore.forEach((btn, index) => {
//     btn.addEventListener("click", () => {
//       const cartItem = btn.closest(".bodyCart");
//       const type = cartItem.dataset.type;
//       const i = parseInt(cartItem.dataset.index);
//       const quantity = cartItem.querySelector(".quantity");
//       const price = cartItem.querySelector(".price");
//       const unitPrice = parseFloat(price.dataset.price);

//       let newQty = parseInt(quantity.textContent) + 1;
//       quantity.textContent = newQty;
//       price.textContent = unitPrice * newQty + " €";

//       updateStorage(type, i, newQty);
//       updateCartCountDisplay();
//       updateTotalDisplay();
//     });
//   });

//   btnLess.forEach((btn, index) => {
//     btn.addEventListener("click", () => {
//       const cartItem = btn.closest(".bodyCart");
//       const type = cartItem.dataset.type;
//       const i = parseInt(cartItem.dataset.index);
//       const quantity = cartItem.querySelector(".quantity");
//       const price = cartItem.querySelector(".price");
//       const unitPrice = parseFloat(price.dataset.price);

//       let currentQty = parseInt(quantity.textContent);
//       let newQty = currentQty - 1;

//       if (newQty <= 0) {
//         // Affichage de la confirmation avec SweetAlert2
//         Swal.fire({
//           title: "Voulez-vous vraiment supprimer cet article ?",
//           text: "La quantité atteindra zéro si vous continuez.",
//           icon: "warning",
//           showCancelButton: true,
//           confirmButtonText: "Oui, supprimer",
//           cancelButtonText: "Annuler",
//           reverseButtons: true,
//         }).then((result) => {
//           if (result.isConfirmed) {
//             // Supprimer de la source de données
//             if (type === "card") storedCardsCart.splice(i, 1);
//             else storedLens.splice(i, 1);

//             // Mettre à jour le localStorage
//             localStorage.setItem(
//               "cardsDataCart",
//               JSON.stringify(storedCardsCart)
//             );
//             localStorage.setItem("lensData", JSON.stringify(storedLens));

//             // Supprimer du DOM
//             cartItem.remove();

//             // Vérification panier vide
//             if (storedCardsCart.length === 0 && storedLens.length === 0) {
//               body.innerHTML = `
//                 <div class="emptyCart">
//                   <p>🛒 Votre panier est vide, ajoutez des articles en cliquant sur 'Ajouter au panier'. 🛒</p>
//                 </div>`;
//             }

//             // Affichage d'une confirmation de suppression
//             Swal.fire(
//               "Supprimé !",
//               "L'article a été supprimé de votre panier.",
//               "success"
//             );
//           }
//         });
//       } else {
//         // Mise à jour de la quantité et du prix
//         quantity.textContent = newQty;
//         price.textContent = unitPrice * newQty + " €";
//         updateStorage(type, i, newQty);
//       }

//       updateCartCountDisplay();
//       updateTotalDisplay();
//     });
//   });

//   btnDeletes.forEach((btn) => {
//     btn.addEventListener("click", (event) => {
//       const cartItem = event.target.closest(".bodyCart");
//       const type = cartItem.dataset.type;
//       const index = parseInt(cartItem.dataset.index);

//       if (type === "card") storedCardsCart.splice(index, 1);
//       else storedLens.splice(index, 1);

//       localStorage.setItem("cardsDataCart", JSON.stringify(storedCardsCart));
//       localStorage.setItem("lensData", JSON.stringify(storedLens));

//       cartItem.remove();
//       updateCartCountDisplay();
//       updateTotalDisplay();

//       if (storedCardsCart.length === 0 && storedLens.length === 0) {
//         body.innerHTML = `
//           <div class="emptyCart">
//             <p>🛒 Votre panier est vide, ajoutez des articles en cliquant sur 'Ajouter au panier'. 🛒</p>
//           </div>`;
//       }
//     });
//   });

//   updateTotalDisplay();
//   updateCartCountDisplay();
// });