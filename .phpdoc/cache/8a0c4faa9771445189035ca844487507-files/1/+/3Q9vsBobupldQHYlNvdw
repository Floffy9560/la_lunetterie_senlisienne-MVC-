1745997770
8a0c4faa9771445189035ca844487507-phpdoc%3A91e85c126d4a82d21e1ff9c6fb2b1661-7c05b92af0ab736c113cde5aaa12c4fc
s:19052:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:39:" phpDocumentor\Reflection\Php\File name";s:10:"brands.php";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"7c05b92af0ab736c113cde5aaa12c4fc";s:39:" phpDocumentor\Reflection\Php\File path";s:36:"la-lunetterie-Senlisienne/brands.php";s:41:" phpDocumentor\Reflection\Php\File source";s:13372:"<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Marques</title>
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link
    href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400..700&family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&display=swap"
    rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <link rel="stylesheet" href="assets/css/headerFooter.css" />
  <link rel="stylesheet" href="assets/css/brands.css" />
</head>

<body>
  <?php include('header.php') ?>
  <!-------------------------mise en plas des "cadre" photos + speech-------------------->
  <main>
    <div class="container_brands">
      <div class="container_cards-post-it">
        <div class="container_cards-scotch"></div>
        <div class="img">
          <img src="assets/img/brett-photo-speech.jpg" alt="Brett" />
        </div>
        <div class="speech">
          <h3>BRETT</h3>
          <!-- <p>
            Brett, c’est avant tout une marque audacieuse, pensée pour les
            hommes qui assument leur personnalité avec caractère. Inspirées
            par un esprit urbain et contemporain, ses montures mêlent
            robustesse et raffinement. Chaque modèle est une alliance parfaite
            entre matériaux de qualité supérieure et design percutant. Brett
            s’adresse à ceux qui recherchent la distinction dans les moindres
            détails, tout en affirmant une masculinité moderne.
          </p> -->
          <ol>
            <li><b>Design Masculin et Audacieux : </b>Des montures aux lignes affirmées, spécialement conçues pour sublimer le style masculin.</li>
            <li><b>Matériaux Premium :</b>Utilisation de matériaux nobles comme l'acétate, le métal et le titane, garantissant confort, robustesse et durabilité.</li>
            <li><b>Confort et Ergonomie :</b>Des lunettes légères et parfaitement ajustées pour un usage quotidien prolongé.</li>
            <li><b>Style Polyvalent :</b>Une collection variée, adaptée aussi bien aux environnements professionnels qu'aux moments décontractés.
            </li>
            <li><b>Qualité Française :</b>Une marque ancrée dans l’élégance française, mêlant savoir-faire artisanal et modernité.s</li>
          </ol>
        </div>
      </div>
      <div class="container_cards-post-it">
        <div class="container_cards-scotch"></div>
        <div class="img">
          <img src="assets/img/ic-berlin-photo-speech.jpg" alt="ic_berlin" />
        </div>
        <div class="speech">
          <h3>Ic BERLIN</h3>
          <p>
            <!-- ic! berlin Entrez dans l’univers de ic! berlin, où l’ingénierie
            allemande rencontre l’artisanat haut de gamme. Reconnue pour ses
            montures sans vis révolutionnaires, cette marque repousse
            constamment les limites de l’innovation. Chaque lunette est
            ultralégère, flexible et incroyablement durable, sans jamais
            sacrifier le style. Avec ic! berlin, vous portez bien plus qu’une
            monture : c’est une expérience, un concentré de technologie.
          </p> -->
          <ol>
            <li><b>Charnières Sans Vis Innovantes :</b> Un design unique breveté qui élimine les vis pour offrir des montures durables,
              flexibles et faciles à réparer.
            </li>
            <li><b>Matériaux Haut de Gamme :</b> Utilisation d'acier inoxydable, de titane et d'acétate ultraléger, garantissant
              un confort exceptionnel et une grande robustesse.</li>
            <li><b>Design Minimaliste et Moderne :</b> Des montures épurées et élégantes qui combinent style
              contemporain et fonctionnalité.</li>
            <li><b>Personnalisation :</b> Une large gamme de couleurs, formes et finitions permettant aux clients de trouver
              une paire adaptée à leur style individuel.</li>
            <li><b>Fabrication Allemande :</b> Un savoir-faire artisanal de qualité, fabriqué à Berlin, qui reflète précision,
              innovation et excellence.</li>
          </ol>
        </div>
      </div>
      <div class="container_cards-post-it">
        <div class="container_cards-scotch"></div>
        <div class="img">
          <img src="assets/img/ss-3.jpg" alt="sunday-flower" />
        </div>
        <div class="speech">
          <h3>SUNDAY SOMEWHERE</h3>
          <!-- <p>
            Sunday Somewhere Sunday Somewhere incarne la légèreté et
            l’évasion. Inspirée par les voyageurs modernes et les âmes libres,
            cette marque australienne propose des designs intemporels qui
            respirent l’élégance décontractée. Ses lunettes, aux lignes
            épurées et aux touches artistiques, invitent à explorer de
            nouveaux horizons. Avec Sunday Somewhere, chaque jour est une
            escapade, chaque instant est une aventure.
          </p> -->
          <ol>
            <li><b>Esthétique Unique et Contemporaine :</b>Des montures au design minimaliste et élégant, mêlant influences rétro et modernes pour un style intemporel.</li>
            <li><b>Esprit Voyageur :</b>Une identité inspirée par l'évasion et l'aventure, parfaite pour les esprits libres et les amateurs de découvertes.</li>
            <li><b>Matériaux Haut de Gamme :</b> Utilisation d’acétate de qualité supérieure et de métal finement travaillé, garantissant robustesse et légèreté.</li>
            <li><b>Finitions Soignées :</b>Détails raffinés et subtils, comme des gravures délicates ou des combinaisons de textures, pour une touche de sophistication.</li>
            <li><b>Style Polyvalent :</b>Une collection variée, idéale aussi bien pour les occasions décontractées que pour des looks plus habillés, adaptée aux hommes et aux femmes.</li>
          </ol>
        </div>
      </div>
      <div class="container_cards-post-it">
        <div class="container_cards-scotch"></div>
        <div class="img">
          <img src="assets/img/brique-et-violette-brand.jpg" alt="brique-et-violette" />
        </div>
        <div class="speech">
          <h3>LA BRIQUE ET LA VIOLETTE</h3>
          <!-- <p>
            La Brique et la Violette Artisanat et poésie se rencontrent dans
            La Brique et la Violette. Cette marque française, véritable ode à
            la créativité, se distingue par son approche artistique et ses
            inspirations locales. Fabriquées avec soin, ses montures reflètent
            un équilibre parfait entre tradition et modernité. Porter une
            monture signée La Brique et la Violette, c’est afficher une
            identité unique, un esprit indépendant et une affection pour
            l’excellence made in France.
          </p> -->
          <ol>
            <li><b>Design créatif et élégant :</b>La Brique et la Violette Eyewear est reconnue pour ses montures au design unique et raffiné. Les lunettes de la marque se distinguent par des formes modernes et des lignes épurées, alliant élégance et originalité, pour un look à la fois sophistiqué et tendance.</li>
            <li><b>Utilisation de matériaux de qualité :</b>La marque privilégie des matériaux haut de gamme pour la fabrication de ses lunettes, comme des acétates de qualité, mais aussi des métaux légers et résistants. Cela garantit non seulement un confort optimal, mais aussi une durabilité à long terme.</li>
            <li><b>Personnalisation et choix variés :</b>La Brique et la Violette Eyewear propose une large gamme de modèles, avec différentes couleurs, formes et tailles. Cela permet à chaque client de trouver une paire de lunettes qui lui correspond parfaitement, tout en offrant des options de personnalisation pour répondre aux besoins spécifiques de chacun.</li>
            <li><b>Confort et légèreté :</b>Les lunettes de la marque sont conçues pour offrir un confort de port optimal, grâce à des matériaux légers et bien adaptés à la forme du visage. La légèreté de leurs montures assure une expérience agréable, même pour un usage prolongé.</li>
            <li><b>Fabrication artisanale et locale :</b>La Brique et la Violette Eyewear mise sur un savoir-faire artisanal, avec une production principalement réalisée en France. Ce processus de fabrication met l'accent sur la qualité et l'attention portée aux détails, ce qui fait la différence dans le produit final</li>
          </ol>
        </div>
      </div>
      <div class="container_cards-post-it">
        <div class="container_cards-scotch"></div>
        <div class="img">
          <img src="assets/img/woodys-brands2.jpg" alt="woodys" />
        </div>
        <div class="speech">
          <h3>WOODYS</h3>
          <!-- <p>
            Woodys Enfin, laissez-vous séduire par Woodys, une marque
            espagnole qui célèbre la nature et le style. Spécialisée dans
            l’utilisation du bois, elle propose des lunettes éco-responsables,
            à la fois élégantes et originales. Chaque pièce raconte une
            histoire, mêlant durabilité, design contemporain et respect de
            l’environnement. Avec Woodys, vous choisissez une lunette qui
            reflète un style de vie, où sophistication et conscience
            écologique vont de pair.
          </p> -->
          <ol>
            <li><b>Matériaux écologiques :</b> Woody's Eyewear se distingue par l'utilisation de matériaux durables et respectueux de l'environnement, notamment le bois, l'acétate et d'autres matériaux recyclés. Cela reflète un engagement fort en faveur de la planète, avec des lunettes fabriquées à partir de ressources renouvelables.</li>
            <li><b>Design unique et moderne :</b> La marque propose des lunettes au design innovant et esthétique, souvent caractérisées par des montures en bois ou combinées avec d'autres matériaux comme l'acier inoxydable. Chaque modèle est conçu pour être à la fois fonctionnel et stylé, avec une touche d'originalité.</li>
            <li><b>Confort et légèreté </b> Les lunettes de Woody's Eyewear sont connues pour leur confort, grâce à la légèreté des matériaux utilisés, en particulier le bois, qui permet de créer des montures agréables à porter, même sur de longues périodes.</li>
            <li><b>Personnalisation :</b>Woody's Eyewear offre souvent des options de personnalisation de ses lunettes, permettant aux clients de choisir les matériaux, les couleurs ou même d'ajouter des gravures. Cela crée un produit unique et adapté aux goûts de chacun.</li>
            <li><b>Durabilité et longévité :</b>Les produits de Woody's Eyewear sont conçus pour être robustes et durer dans le temps, offrant une qualité supérieure et un bon rapport qualité-prix. Les lunettes sont fabriquées pour résister à l'usure tout en conservant leur esthétique et fonctionnalité.</li>
          </ol>
        </div>
      </div>
      <div class="container_cards-post-it">
        <div class="container_cards-scotch"></div>
        <div class="img">
          <img src="assets/img/FF-brands.jpg" alt="frenchy friendly" />
        </div>
        <div class="speech">
          <h3>FRIENDLY FRENCHY</h3>
          <!-- <p>
            Et maintenant, un coup de cœur : Friendly Frenchy, la marque 100 %
            éco-responsable . Basée en France, elle conçoit des montures à
            partir de coquillages recyclés, une première mondiale! Innovante,
            durable et stylée, Friendly Frenchy incarne l’engagement pour un
            avenir meilleur tout en offrant des lunettes au design unique.
            Avec Friendly Frenchy, chaque monture raconte une histoire de
            respect pour la planète et de passion pour l’élégance.
          </p> -->
          <ol>
            <li><b>Esprit Made in France :</b>Une marque qui valorise le savoir-faire français, avec des montures conçues et fabriquées localement pour garantir qualité et authenticité.</li>
            <li><b>Design Coloré et Original : </b>Des lunettes aux styles modernes et audacieux, intégrant des touches de couleurs vibrantes pour une identité unique.</li>
            <li><b>Engagement Écoresponsable :</b>Utilisation de matériaux recyclés ou durables, avec une démarche respectueuse de l'environnement.</li>
            <li><b>Légèreté et Confort :</b>Des montures ergonomiques et légères, conçues pour offrir un confort optimal tout au long de la journée.</li>
            <li><b>Accessibilité :</b>Une offre qui allie qualité premium et prix abordables, rendant le design français accessible à tous.</li>
          </ol>
        </div>
      </div>
    </div>
  </main>
  <?php include('footer.php') ?>
</body>

</html>";s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";