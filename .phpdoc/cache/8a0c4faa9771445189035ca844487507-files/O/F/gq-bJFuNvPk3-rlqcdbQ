1745997771
8a0c4faa9771445189035ca844487507-phpdoc%3A19669fb3f40fb2340150a785271dc422-1595e69fd186416a68f5de2ec64f1b5a
s:34704:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjEwOiJicmFuZHMucGhwIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjE1OTVlNjlmZDE4NjQxNmE2OGY1ZGUyZWM2NGYxYjVhIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NDg6ImxhLWx1bmV0dGVyaWUtU2VubGlzaWVubmUgLSBNVkMvdmlld3MvYnJhbmRzLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MjUxMDA6IjwhRE9DVFlQRSBodG1sPg0KPGh0bWwgbGFuZz0iZnIiPg0KDQo8aGVhZD4NCiAgPG1ldGEgY2hhcnNldD0iVVRGLTgiIC8+DQogIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIiAvPg0KICA8dGl0bGU+TGEgbHVuZXR0ZXJpZSBTZW5saXNpZW5uZTwvdGl0bGU+DQogIDxsaW5rIHJlbD0icHJlY29ubmVjdCIgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbSIgLz4NCiAgPGxpbmsgcmVsPSJwcmVjb25uZWN0IiBocmVmPSJodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tIiBjcm9zc29yaWdpbiAvPg0KICA8bGluaw0KICAgIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9RGFuY2luZytTY3JpcHQ6d2dodEA0MDAuLjcwMCZmYW1pbHk9T3BlbitTYW5zOml0YWwsd2dodEAwLDMwMC4uODAwOzEsMzAwLi44MDAmZmFtaWx5PVNvdXJjZStDb2RlK1BybzppdGFsLHdnaHRAMCwyMDAuLjkwMDsxLDIwMC4uOTAwJmRpc3BsYXk9c3dhcCINCiAgICByZWw9InN0eWxlc2hlZXQiIC8+DQogIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9ib290c3RyYXAtaWNvbnNAMS4xMS4zL2ZvbnQvYm9vdHN0cmFwLWljb25zLm1pbi5jc3MiPg0KICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9hc3NldHMvY3NzL2hlYWRlckZvb3Rlci5jc3MiIC8+DQogIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Fzc2V0cy9jc3MvYnJhbmRzLmNzcyIgLz4NCjwvaGVhZD4NCg0KPGJvZHk+DQogIDw/cGhwIGluY2x1ZGUgX19ESVJfXyAuICcvLi4vdGVtcGxhdGVzL2hlYWRlci5waHAnID8+DQogIDwhLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLW1pc2UgZW4gcGxhcyBkZXMgImNhZHJlIiBwaG90b3MgKyBzcGVlY2gtLS0tLS0tLS0tLS0tLS0tLS0tLT4NCiAgPG1haW4+DQogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyX2JyYW5kcyI+DQoNCiAgICAgIDwhLS0gPGRpdiBjbGFzcz0iY29udGFpbmVyX2NhcmRzLXBvc3QtaXQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfY2FyZHMtc2NvdGNoIj48L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4NCiAgICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0cy9pbWcvaWMtYmVybGluLXBob3RvLXNwZWVjaC5qcGciIGFsdD0iaWNfYmVybGluIiAvPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3BlZWNoIj4NCiAgICAgICAgICA8aDM+SWMgQkVSTElOPC9oMz4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+PGI+Q2hhcm5pw6hyZXMgU2FucyBWaXMgSW5ub3ZhbnRlcyA6PC9iPiBVbiBkZXNpZ24gdW5pcXVlIGJyZXZldMOpIHF1aSDDqWxpbWluZSBsZXMgdmlzIHBvdXIgb2ZmcmlyIGRlcyBtb250dXJlcyBkdXJhYmxlcywNCiAgICAgICAgICAgICAgZmxleGlibGVzIGV0IGZhY2lsZXMgw6AgcsOpcGFyZXIuDQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPGxpPjxiPk1hdMOpcmlhdXggSGF1dCBkZSBHYW1tZSA6PC9iPiBVdGlsaXNhdGlvbiBkJ2FjaWVyIGlub3h5ZGFibGUsIGRlIHRpdGFuZSBldCBkJ2Fjw6l0YXRlIHVsdHJhbMOpZ2VyLCBnYXJhbnRpc3NhbnQNCiAgICAgICAgICAgICAgdW4gY29uZm9ydCBleGNlcHRpb25uZWwgZXQgdW5lIGdyYW5kZSByb2J1c3Rlc3NlLjwvbGk+DQogICAgICAgICAgICA8bGk+PGI+RGVzaWduIE1pbmltYWxpc3RlIGV0IE1vZGVybmUgOjwvYj4gRGVzIG1vbnR1cmVzIMOpcHVyw6llcyBldCDDqWzDqWdhbnRlcyBxdWkgY29tYmluZW50IHN0eWxlDQogICAgICAgICAgICAgIGNvbnRlbXBvcmFpbiBldCBmb25jdGlvbm5hbGl0w6kuPC9saT4NCiAgICAgICAgICAgIDxsaT48Yj5QZXJzb25uYWxpc2F0aW9uIDo8L2I+IFVuZSBsYXJnZSBnYW1tZSBkZSBjb3VsZXVycywgZm9ybWVzIGV0IGZpbml0aW9ucyBwZXJtZXR0YW50IGF1eCBjbGllbnRzIGRlIHRyb3V2ZXINCiAgICAgICAgICAgICAgdW5lIHBhaXJlIGFkYXB0w6llIMOgIGxldXIgc3R5bGUgaW5kaXZpZHVlbC48L2xpPg0KICAgICAgICAgICAgPGxpPjxiPkZhYnJpY2F0aW9uIEFsbGVtYW5kZSA6PC9iPiBVbiBzYXZvaXItZmFpcmUgYXJ0aXNhbmFsIGRlIHF1YWxpdMOpLCBmYWJyaXF1w6kgw6AgQmVybGluLCBxdWkgcmVmbMOodGUgcHLDqWNpc2lvbiwNCiAgICAgICAgICAgICAgaW5ub3ZhdGlvbiBldCBleGNlbGxlbmNlLjwvbGk+DQogICAgICAgICAgPC9vbD4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Rpdj4gLS0+DQoNCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9jYXJkIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4NCiAgICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0cy9pbWcvbWFycXVlcy9Xb29keXovcGx2L1dPT0RZU19BTklNQV9KVU5FRS5qcGciIGFsdD0iV09PRFlTIiAvPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJ0b2dnbGUtYnRuIj4NCiAgICAgICAgICA8aDM+V09PRFlTPC9oMz4gPGkgY2xhc3M9ImJpIGJpLWNhcmV0LWRvd24iPjwvaT4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InNwZWVjaCI+DQogICAgICAgICAgPG9sPg0KICAgICAgICAgICAgPGxpPjxiPk1hdMOpcmlhdXggw6ljb2xvZ2lxdWVzIDo8L2I+IFdvb2R5J3MgRXlld2VhciBzZSBkaXN0aW5ndWUgcGFyIGwndXRpbGlzYXRpb24gZGUgbWF0w6lyaWF1eCBkdXJhYmxlcyBldCByZXNwZWN0dWV1eCBkZSBsJ2Vudmlyb25uZW1lbnQsIG5vdGFtbWVudCBsZSBib2lzLCBsJ2Fjw6l0YXRlIGV0IGQnYXV0cmVzIG1hdMOpcmlhdXggcmVjeWNsw6lzLiBDZWxhIHJlZmzDqHRlIHVuIGVuZ2FnZW1lbnQgZm9ydCBlbiBmYXZldXIgZGUgbGEgcGxhbsOodGUsIGF2ZWMgZGVzIGx1bmV0dGVzIGZhYnJpcXXDqWVzIMOgIHBhcnRpciBkZSByZXNzb3VyY2VzIHJlbm91dmVsYWJsZXMuPC9saT4NCiAgICAgICAgICAgIDxsaT48Yj5EZXNpZ24gdW5pcXVlIGV0IG1vZGVybmUgOjwvYj4gTGEgbWFycXVlIHByb3Bvc2UgZGVzIGx1bmV0dGVzIGF1IGRlc2lnbiBpbm5vdmFudCBldCBlc3Row6l0aXF1ZSwgc291dmVudCBjYXJhY3TDqXJpc8OpZXMgcGFyIGRlcyBtb250dXJlcyBlbiBib2lzIG91IGNvbWJpbsOpZXMgYXZlYyBkJ2F1dHJlcyBtYXTDqXJpYXV4IGNvbW1lIGwnYWNpZXIgaW5veHlkYWJsZS4gQ2hhcXVlIG1vZMOobGUgZXN0IGNvbsOndSBwb3VyIMOqdHJlIMOgIGxhIGZvaXMgZm9uY3Rpb25uZWwgZXQgc3R5bMOpLCBhdmVjIHVuZSB0b3VjaGUgZCdvcmlnaW5hbGl0w6kuPC9saT4NCiAgICAgICAgICAgIDxsaT48Yj5Db25mb3J0IGV0IGzDqWfDqHJldMOpIDwvYj4gTGVzIGx1bmV0dGVzIGRlIFdvb2R5J3MgRXlld2VhciBzb250IGNvbm51ZXMgcG91ciBsZXVyIGNvbmZvcnQsIGdyw6JjZSDDoCBsYSBsw6lnw6hyZXTDqSBkZXMgbWF0w6lyaWF1eCB1dGlsaXPDqXMsIGVuIHBhcnRpY3VsaWVyIGxlIGJvaXMsIHF1aSBwZXJtZXQgZGUgY3LDqWVyIGRlcyBtb250dXJlcyBhZ3LDqWFibGVzIMOgIHBvcnRlciwgbcOqbWUgc3VyIGRlIGxvbmd1ZXMgcMOpcmlvZGVzLjwvbGk+DQogICAgICAgICAgICA8bGk+PGI+UGVyc29ubmFsaXNhdGlvbiA6PC9iPldvb2R5J3MgRXlld2VhciBvZmZyZSBzb3V2ZW50IGRlcyBvcHRpb25zIGRlIHBlcnNvbm5hbGlzYXRpb24gZGUgc2VzIGx1bmV0dGVzLCBwZXJtZXR0YW50IGF1eCBjbGllbnRzIGRlIGNob2lzaXIgbGVzIG1hdMOpcmlhdXgsIGxlcyBjb3VsZXVycyBvdSBtw6ptZSBkJ2Fqb3V0ZXIgZGVzIGdyYXZ1cmVzLiBDZWxhIGNyw6llIHVuIHByb2R1aXQgdW5pcXVlIGV0IGFkYXB0w6kgYXV4IGdvw7t0cyBkZSBjaGFjdW4uPC9saT4NCiAgICAgICAgICAgIDxsaT48Yj5EdXJhYmlsaXTDqSBldCBsb25nw6l2aXTDqSA6PC9iPkxlcyBwcm9kdWl0cyBkZSBXb29keSdzIEV5ZXdlYXIgc29udCBjb27Dp3VzIHBvdXIgw6p0cmUgcm9idXN0ZXMgZXQgZHVyZXIgZGFucyBsZSB0ZW1wcywgb2ZmcmFudCB1bmUgcXVhbGl0w6kgc3Vww6lyaWV1cmUgZXQgdW4gYm9uIHJhcHBvcnQgcXVhbGl0w6ktcHJpeC4gTGVzIGx1bmV0dGVzIHNvbnQgZmFicmlxdcOpZXMgcG91ciByw6lzaXN0ZXIgw6AgbCd1c3VyZSB0b3V0IGVuIGNvbnNlcnZhbnQgbGV1ciBlc3Row6l0aXF1ZSBldCBmb25jdGlvbm5hbGl0w6kuPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZGl2Pg0KDQogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfY2FyZCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImltZyI+DQogICAgICAgICAgPGltZyBzcmM9Ii9hc3NldHMvaW1nL21hcnF1ZXMvYnJldHQvcGx2L3Bsdi1icmV0dC1zb2xhaXJlLWhvbW1lLW1hcnJvbi1tb25vc291cmNpbC1qdWlsbGV0MjAyNC5qcGciIGFsdD0iQnJldHQiIC8+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9InRvZ2dsZS1idG4iPg0KICAgICAgICAgIDxoMz5CUkVUVDwvaDM+DQogICAgICAgICAgPGkgY2xhc3M9ImJpIGJpLWNhcmV0LWRvd24iPjwvaT4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InNwZWVjaCI+DQogICAgICAgICAgPG9sPg0KICAgICAgICAgICAgPGxpPjxiPkRlc2lnbiBNYXNjdWxpbiBldCBBdWRhY2lldXggOiA8L2I+RGVzIG1vbnR1cmVzIGF1eCBsaWduZXMgYWZmaXJtw6llcywgc3DDqWNpYWxlbWVudCBjb27Dp3VlcyBwb3VyIHN1YmxpbWVyIGxlIHN0eWxlIG1hc2N1bGluLjwvbGk+DQogICAgICAgICAgICA8bGk+PGI+TWF0w6lyaWF1eCBQcmVtaXVtIDo8L2I+VXRpbGlzYXRpb24gZGUgbWF0w6lyaWF1eCBub2JsZXMgY29tbWUgbCdhY8OpdGF0ZSwgbGUgbcOpdGFsIGV0IGxlIHRpdGFuZSwgZ2FyYW50aXNzYW50IGNvbmZvcnQsIHJvYnVzdGVzc2UgZXQgZHVyYWJpbGl0w6kuPC9saT4NCiAgICAgICAgICAgIDxsaT48Yj5Db25mb3J0IGV0IEVyZ29ub21pZSA6PC9iPkRlcyBsdW5ldHRlcyBsw6lnw6hyZXMgZXQgcGFyZmFpdGVtZW50IGFqdXN0w6llcyBwb3VyIHVuIHVzYWdlIHF1b3RpZGllbiBwcm9sb25nw6kuPC9saT4NCiAgICAgICAgICAgIDxsaT48Yj5TdHlsZSBQb2x5dmFsZW50IDo8L2I+VW5lIGNvbGxlY3Rpb24gdmFyacOpZSwgYWRhcHTDqWUgYXVzc2kgYmllbiBhdXggZW52aXJvbm5lbWVudHMgcHJvZmVzc2lvbm5lbHMgcXUnYXV4IG1vbWVudHMgZMOpY29udHJhY3TDqXMuDQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPGxpPjxiPlF1YWxpdMOpIEZyYW7Dp2Fpc2UgOjwvYj5VbmUgbWFycXVlIGFuY3LDqWUgZGFucyBs4oCZw6lsw6lnYW5jZSBmcmFuw6dhaXNlLCBtw6psYW50IHNhdm9pci1mYWlyZSBhcnRpc2FuYWwgZXQgbW9kZXJuaXTDqS5zPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZGl2Pg0KDQogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfY2FyZCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImltZyI+DQogICAgICAgICAgPGltZyBzcmM9Ii9hc3NldHMvaW1nL21hcnF1ZXMvU3VuZGF5LVNvbWV3aGVyZS9wbHYvU3VuZGF5LXNvbWV3aGVyZS1Bc3RlcmlhX0NyaWNlLndlYnAiIGFsdD0iU1VOREFZIFNPTUVXSEVSRSIgLz4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idG9nZ2xlLWJ0biI+DQogICAgICAgICAgPGgzPlNVTkRBWSBTT01FV0hFUkU8L2gzPg0KICAgICAgICAgIDxpIGNsYXNzPSJiaSBiaS1jYXJldC1kb3duIj48L2k+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJzcGVlY2giPg0KICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPk9yaWdpbmUgYXVzdHJhbGllbm5lPC9zdHJvbmc+IDogRm9uZMOpZSBlbiAyMDEwLCBTdW5kYXkgU29tZXdoZXJlIGVzdCB1bmUgbWFycXVlIGF1c3RyYWxpZW5uZSBxdWkgcydpbnNwaXJlIGRlcyBhbm7DqWVzIDcwLCBkZXMgdm95YWdlcyBldCBkZXMgY3VsdHVyZXMgZHUgbW9uZGUgcG91ciBjcsOpZXIgZGVzIGx1bmV0dGVzIGF1IGRlc2lnbiB1bmlxdWUuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPkRlc2lnbiBpbnRlbXBvcmVsPC9zdHJvbmc+IDogTGVzIGNvbGxlY3Rpb25zIGRlIGxhIG1hcnF1ZSByZXZpc2l0ZW50IGxlcyBtb250dXJlcyByw6l0cm8gYXZlYyBzdHlsZSwgcHJvcG9zYW50IGRlcyBsdW5ldHRlcyBkZSBzb2xlaWwgZXQgZGUgdnVlIGF1eCBmb3JtZXMgYXJyb25kaWVzIGV0IGF1eCBjb3VsZXVycyBpbnNwaXLDqWVzIGRlcyBwYXlzYWdlcyBkZSBsJ2jDqW1pc3Bow6hyZSBzdWQuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPkZhYnJpY2F0aW9uIGFydGlzYW5hbGU8L3N0cm9uZz4gOiBMZXMgbHVuZXR0ZXMgU3VuZGF5IFNvbWV3aGVyZSBzb250IGZhYnJpcXXDqWVzIMOgIGxhIG1haW4gc2Vsb24gZGVzIG5vcm1lcyBkZSBxdWFsaXTDqSDDqWxldsOpZXMsIGF2ZWMgdW5lIGF0dGVudGlvbiBwYXJ0aWN1bGnDqHJlIHBvcnTDqWUgYXV4IGTDqXRhaWxzIGV0IGF1eCBmaW5pdGlvbnMuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPkFkb3B0w6llIHBhciBsZXMgY8OpbMOpYnJpdMOpczwvc3Ryb25nPiA6IExhIG1hcnF1ZSBhIGNvbnF1aXMgbGUgY8WTdXIgZGUgbm9tYnJldXNlcyBjw6lsw6licml0w6lzIGludGVybmF0aW9uYWxlcyB0ZWxsZXMgcXVlIEJleW9uY8OpLCBSaWhhbm5hLCBLZW5kYWxsIEplbm5lciBldCBHaWdpIEhhZGlkLCBxdWkgYXBwcsOpY2llbnQgc2VzIGRlc2lnbnMgdGVuZGFuY2UgZXQgb3JpZ2luYXV4LjwvbGk+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5QcsOpc2VuY2UgbW9uZGlhbGU8L3N0cm9uZz4gOiBTdW5kYXkgU29tZXdoZXJlIGVzdCBkaXNwb25pYmxlIGRhbnMgcGx1cyBkZSA2MDAgbWFnYXNpbnMgcsOpcGFydGlzIGRhbnMgMzAgcGF5cyDDoCB0cmF2ZXJzIGxlIG1vbmRlLCByZWZsw6l0YW50IHNvbiBzdWNjw6hzIGV0IHNvbiBhdHRyYWl0IGludGVybmF0aW9uYWwuPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZGl2Pg0KDQogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfY2FyZCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImltZyI+DQogICAgICAgICAgPGltZyBzcmM9Ii9hc3NldHMvaW1nL21hcnF1ZXMvYnJpcXVlLWV0LXZpb2xldHRlL3Bsdi9icmlxdWUtZXQtdmlvbGV0dGUtcGx2LmpwZyIgYWx0PSJMQSBCUklRVUUgRVQgTEEgVklPTEVUVEUiIC8+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJ0b2dnbGUtYnRuIj4NCiAgICAgICAgICA8aDM+TEEgQlJJUVVFIEVUIExBIFZJT0xFVFRFPC9oMz4NCiAgICAgICAgICA8aSBjbGFzcz0iYmkgYmktY2FyZXQtZG93biI+PC9pPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3BlZWNoIj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+PGI+RGVzaWduIGNyw6lhdGlmIGV0IMOpbMOpZ2FudCA6PC9iPkxhIEJyaXF1ZSBldCBsYSBWaW9sZXR0ZSBFeWV3ZWFyIGVzdCByZWNvbm51ZSBwb3VyIHNlcyBtb250dXJlcyBhdSBkZXNpZ24gdW5pcXVlIGV0IHJhZmZpbsOpLiBMZXMgbHVuZXR0ZXMgZGUgbGEgbWFycXVlIHNlIGRpc3Rpbmd1ZW50IHBhciBkZXMgZm9ybWVzIG1vZGVybmVzIGV0IGRlcyBsaWduZXMgw6lwdXLDqWVzLCBhbGxpYW50IMOpbMOpZ2FuY2UgZXQgb3JpZ2luYWxpdMOpLCBwb3VyIHVuIGxvb2sgw6AgbGEgZm9pcyBzb3BoaXN0aXF1w6kgZXQgdGVuZGFuY2UuPC9saT4NCiAgICAgICAgICAgIDxsaT48Yj5VdGlsaXNhdGlvbiBkZSBtYXTDqXJpYXV4IGRlIHF1YWxpdMOpIDo8L2I+TGEgbWFycXVlIHByaXZpbMOpZ2llIGRlcyBtYXTDqXJpYXV4IGhhdXQgZGUgZ2FtbWUgcG91ciBsYSBmYWJyaWNhdGlvbiBkZSBzZXMgbHVuZXR0ZXMsIGNvbW1lIGRlcyBhY8OpdGF0ZXMgZGUgcXVhbGl0w6ksIG1haXMgYXVzc2kgZGVzIG3DqXRhdXggbMOpZ2VycyBldCByw6lzaXN0YW50cy4gQ2VsYSBnYXJhbnRpdCBub24gc2V1bGVtZW50IHVuIGNvbmZvcnQgb3B0aW1hbCwgbWFpcyBhdXNzaSB1bmUgZHVyYWJpbGl0w6kgw6AgbG9uZyB0ZXJtZS48L2xpPg0KICAgICAgICAgICAgPGxpPjxiPlBlcnNvbm5hbGlzYXRpb24gZXQgY2hvaXggdmFyacOpcyA6PC9iPkxhIEJyaXF1ZSBldCBsYSBWaW9sZXR0ZSBFeWV3ZWFyIHByb3Bvc2UgdW5lIGxhcmdlIGdhbW1lIGRlIG1vZMOobGVzLCBhdmVjIGRpZmbDqXJlbnRlcyBjb3VsZXVycywgZm9ybWVzIGV0IHRhaWxsZXMuIENlbGEgcGVybWV0IMOgIGNoYXF1ZSBjbGllbnQgZGUgdHJvdXZlciB1bmUgcGFpcmUgZGUgbHVuZXR0ZXMgcXVpIGx1aSBjb3JyZXNwb25kIHBhcmZhaXRlbWVudCwgdG91dCBlbiBvZmZyYW50IGRlcyBvcHRpb25zIGRlIHBlcnNvbm5hbGlzYXRpb24gcG91ciByw6lwb25kcmUgYXV4IGJlc29pbnMgc3DDqWNpZmlxdWVzIGRlIGNoYWN1bi48L2xpPg0KICAgICAgICAgICAgPGxpPjxiPkNvbmZvcnQgZXQgbMOpZ8OocmV0w6kgOjwvYj5MZXMgbHVuZXR0ZXMgZGUgbGEgbWFycXVlIHNvbnQgY29uw6d1ZXMgcG91ciBvZmZyaXIgdW4gY29uZm9ydCBkZSBwb3J0IG9wdGltYWwsIGdyw6JjZSDDoCBkZXMgbWF0w6lyaWF1eCBsw6lnZXJzIGV0IGJpZW4gYWRhcHTDqXMgw6AgbGEgZm9ybWUgZHUgdmlzYWdlLiBMYSBsw6lnw6hyZXTDqSBkZSBsZXVycyBtb250dXJlcyBhc3N1cmUgdW5lIGV4cMOpcmllbmNlIGFncsOpYWJsZSwgbcOqbWUgcG91ciB1biB1c2FnZSBwcm9sb25nw6kuPC9saT4NCiAgICAgICAgICAgIDxsaT48Yj5GYWJyaWNhdGlvbiBhcnRpc2FuYWxlIGV0IGxvY2FsZSA6PC9iPkxhIEJyaXF1ZSBldCBsYSBWaW9sZXR0ZSBFeWV3ZWFyIG1pc2Ugc3VyIHVuIHNhdm9pci1mYWlyZSBhcnRpc2FuYWwsIGF2ZWMgdW5lIHByb2R1Y3Rpb24gcHJpbmNpcGFsZW1lbnQgcsOpYWxpc8OpZSBlbiBGcmFuY2UuIENlIHByb2Nlc3N1cyBkZSBmYWJyaWNhdGlvbiBtZXQgbCdhY2NlbnQgc3VyIGxhIHF1YWxpdMOpIGV0IGwnYXR0ZW50aW9uIHBvcnTDqWUgYXV4IGTDqXRhaWxzLCBjZSBxdWkgZmFpdCBsYSBkaWZmw6lyZW5jZSBkYW5zIGxlIHByb2R1aXQgZmluYWw8L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQoNCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9jYXJkIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4NCiAgICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0cy9pbWcvbWFycXVlcy9GcmllbmRseS1mcmVuY2h5L3Bsdi92aXN1ZWwtcGx2LXF1YXRyby1wbS1mcmllbmRseS1mcmVuY2h5LW1haS0yMy5qcGciIGFsdD0iRlJJRU5ETFkgRlJFTkNIWSIgLz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InRvZ2dsZS1idG4iPg0KICAgICAgICAgIDxoMz5GUklFTkRMWSBGUkVOQ0hZPC9oMz4NCiAgICAgICAgICA8aSBjbGFzcz0iYmkgYmktY2FyZXQtZG93biI+PC9pPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3BlZWNoIj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+PGI+RXNwcml0IE1hZGUgaW4gRnJhbmNlIDo8L2I+VW5lIG1hcnF1ZSBxdWkgdmFsb3Jpc2UgbGUgc2F2b2lyLWZhaXJlIGZyYW7Dp2FpcywgYXZlYyBkZXMgbW9udHVyZXMgY29uw6d1ZXMgZXQgZmFicmlxdcOpZXMgbG9jYWxlbWVudCBwb3VyIGdhcmFudGlyIHF1YWxpdMOpIGV0IGF1dGhlbnRpY2l0w6kuPC9saT4NCiAgICAgICAgICAgIDxsaT48Yj5EZXNpZ24gQ29sb3LDqSBldCBPcmlnaW5hbCA6IDwvYj5EZXMgbHVuZXR0ZXMgYXV4IHN0eWxlcyBtb2Rlcm5lcyBldCBhdWRhY2lldXgsIGludMOpZ3JhbnQgZGVzIHRvdWNoZXMgZGUgY291bGV1cnMgdmlicmFudGVzIHBvdXIgdW5lIGlkZW50aXTDqSB1bmlxdWUuPC9saT4NCiAgICAgICAgICAgIDxsaT48Yj5FbmdhZ2VtZW50IMOJY29yZXNwb25zYWJsZSA6PC9iPlV0aWxpc2F0aW9uIGRlIG1hdMOpcmlhdXggcmVjeWNsw6lzIG91IGR1cmFibGVzLCBhdmVjIHVuZSBkw6ltYXJjaGUgcmVzcGVjdHVldXNlIGRlIGwnZW52aXJvbm5lbWVudC48L2xpPg0KICAgICAgICAgICAgPGxpPjxiPkzDqWfDqHJldMOpIGV0IENvbmZvcnQgOjwvYj5EZXMgbW9udHVyZXMgZXJnb25vbWlxdWVzIGV0IGzDqWfDqHJlcywgY29uw6d1ZXMgcG91ciBvZmZyaXIgdW4gY29uZm9ydCBvcHRpbWFsIHRvdXQgYXUgbG9uZyBkZSBsYSBqb3VybsOpZS48L2xpPg0KICAgICAgICAgICAgPGxpPjxiPkFjY2Vzc2liaWxpdMOpIDo8L2I+VW5lIG9mZnJlIHF1aSBhbGxpZSBxdWFsaXTDqSBwcmVtaXVtIGV0IHByaXggYWJvcmRhYmxlcywgcmVuZGFudCBsZSBkZXNpZ24gZnJhbsOnYWlzIGFjY2Vzc2libGUgw6AgdG91cy48L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQoNCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9jYXJkIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4NCiAgICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0cy9pbWcvbWFycXVlcy9EZW1ldHovcGx2L2RlbWV0ei1wbHYyLkpQRyIgYWx0PSJEZW1ldHoiIC8+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJ0b2dnbGUtYnRuIj4NCiAgICAgICAgICA8aDM+RGVtZXR6PC9oMz4NCiAgICAgICAgICA8aSBjbGFzcz0iYmkgYmktY2FyZXQtZG93biI+PC9pPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3BlZWNoIj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+PGI+U3DDqWNpYWxpc2F0aW9uIGRhbnMgbCdvcHRpcXVlIHNwb3J0aXZlIDo8L2I+IERlcHVpcyBwbHVzIGRlIDcwIGFucywgRGVtZXR6IHNlIGNvbnNhY3JlIMOgIGxhIGNvbmNlcHRpb24gZGUgbW9udHVyZXMgYWRhcHTDqWVzIGF1eCBhY3Rpdml0w6lzIHNwb3J0aXZlcywgb2ZmcmFudCBkZXMgc29sdXRpb25zIGF2ZWMgb3Ugc2FucyBjb3JyZWN0aW9uIHBvdXIgbGVzIHNwb3J0aWZzIGRlIHRvdXMgw6JnZXMuPC9saT4NCiAgICAgICAgICAgIDxsaT48Yj5MYXJnZSBnYW1tZSBkZSBwcm9kdWl0cyA6IDwvYj5MYSBtYXJxdWUgcHJvcG9zZSB1bmUgdmFyacOpdMOpIGRlIGx1bmV0dGVzIGRlIHNvbGVpbCBwb3VyIGhvbW1lcywgZmVtbWVzIGV0IGVuZmFudHMsIGRpc3BvbmlibGVzIGVuIGRpZmbDqXJlbnRlcyBmb3JtZXMgZXQgY291bGV1cnMgcG91ciBzJ2FkYXB0ZXIgw6AgdG91dGVzIGxlcyBtb3JwaG9sb2dpZXMgZXQgcHLDqWbDqXJlbmNlcy48L2xpPg0KICAgICAgICAgICAgPGxpPjxiPkFkYXB0YWJpbGl0w6kgw6AgbGEgdnVlIDo8L2I+RGUgbm9tYnJldXggbW9kw6hsZXMgZGUgbHVuZXR0ZXMgZGUgc29sZWlsIERlbWV0eiBwZXV2ZW50IMOqdHJlIMOpcXVpcMOpcyBkZSB2ZXJyZXMgY29ycmVjdGV1cnMsIHBlcm1ldHRhbnQgYXV4IHBvcnRldXJzIGRlIGLDqW7DqWZpY2llciBkJ3VuZSB2aXNpb24gb3B0aW1hbGUgbG9ycyBkZSBsZXVycyBhY3Rpdml0w6lzIGVuIHBsZWluIGFpci48L2xpPg0KICAgICAgICAgICAgPGxpPjxiPkNvbGxhYm9yYXRpb24gYXZlYyBkJ2F1dHJlcyBtYXJxdWVzIDo8L2I+RGVtZXR6IGEgw6lsYXJnaSBzb24gb2ZmcmUgZW4gaW50w6lncmFudCBkZXMgY29sbGVjdGlvbnMgY29tbWUgSGVua28sIHVuZSBtYXJxdWUgcHJvcG9zYW50IDIxNCBtb2TDqGxlcyBkZSBsdW5ldHRlcyBkZSBzb2xlaWwgYXZlYyB2ZXJyZXMgcG9sYXJpc8OpcyBldCBhbnRpLXJheXVyZXMsIGVucmljaGlzc2FudCBhaW5zaSBzYSBnYW1tZSBkZSBwcm9kdWl0cy48L2xpPg0KICAgICAgICAgICAgPGxpPjxiPkVuZ2FnZW1lbnQgZW52ZXJzIGxhIHF1YWxpdMOpIGV0IGxhIHByb3RlY3Rpb24gOjwvYj5MZXMgbHVuZXR0ZXMgRGVtZXR6IHNvbnQgY29uw6d1ZXMgcG91ciBvZmZyaXIgdW5lIHByb3RlY3Rpb24gVVYgb3B0aW1hbGUsIHByb3TDqWdlYW50IGxlcyB5ZXV4IGRlcyBlZmZldHMgbsOpZmFzdGVzIGR1IHNvbGVpbCB0b3V0IGVuIGFzc3VyYW50IHVuIGFqdXN0ZW1lbnQgY29uZm9ydGFibGUgZXQgc3RhYmxlLCBtw6ptZSBsb3JzIGQnYWN0aXZpdMOpcyBzcG9ydGl2ZXMgaW50ZW5zZXM8L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQoNCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9jYXJkIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4NCiAgICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0cy9pbWcvbWFycXVlcy9NaW5hbW90by9wbHYvbWluYW1vdG8tcGx2LnBuZyIgYWx0PSJNaW5hbW90byIgLz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InRvZ2dsZS1idG4iPg0KICAgICAgICAgIDxoMz5NaW5hbW90bzwvaDM+DQogICAgICAgICAgPGkgY2xhc3M9ImJpIGJpLWNhcmV0LWRvd24iPjwvaT4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InNwZWVjaCI+DQogICAgICAgICAgPG9sPg0KICAgICAgICAgICAgPGxpPjxiPkjDqXJpdGFnZSBqYXBvbmFpcyA6PC9iPiBPcmlnaW5haXJlIGRlIFNhYmFlLCBkYW5zIGxhIHByw6lmZWN0dXJlIGRlIEZ1a3VpLCBiZXJjZWF1IGRlIGwnaW5kdXN0cmllIGx1bmV0acOocmUgamFwb25haXNlLCBNaW5hbW90byBwdWlzZSBzb24gaW5zcGlyYXRpb24gZGFucyBsJ2hpc3RvaXJlIGV0IGxhIGN1bHR1cmUgZHUgSmFwb24uPC9saT4NCiAgICAgICAgICAgIDxsaT48Yj5BcnRpc2FuYXQgdHJhZGl0aW9ubmVsIDogPC9iPkNoYXF1ZSBtb250dXJlIGVzdCBjb27Dp3VlIGF2ZWMgdW5lIGF0dGVudGlvbiBtw6l0aWN1bGV1c2UgYXV4IGTDqXRhaWxzLCByZWZsw6l0YW50IGwnYXJ0aXNhbmF0IGphcG9uYWlzIGQnZXhjZXB0aW9uLiBMZSBsb2dvIGRlIGxhIG1hcnF1ZSwgcsOpYWxpc8OpIMOgIGxhIG1haW4gcGFyIHVuIG1hw650cmUgY2FsbGlncmFwaGUsIHN5bWJvbGlzZSBjZXR0ZSBwcsOpY2lzaW9uIGV0IGNlIHNhdm9pci1mYWlyZS48L2xpPg0KICAgICAgICAgICAgPGxpPjxiPk1hdMOpcmlhdXggZGUgaGF1dGUgcXVhbGl0w6kgOjwvYj5MZXMgbHVuZXR0ZXMgTWluYW1vdG8gc29udCBmYWJyaXF1w6llcyBleGNsdXNpdmVtZW50IGVuIHRpdGFuZSBqYXBvbmFpcyBwdXIsIHJlY29ubnUgcG91ciBzYSBsw6lnw6hyZXTDqSwgc2EgZHVyYWJpbGl0w6kgZXQgc29uIGNvbmZvcnQgb3B0aW1hbC48L2xpPg0KICAgICAgICAgICAgPGxpPjxiPkRlc2lnbiDDqXB1csOpIGV0IGludGVtcG9yZWwgOjwvYj5MYSBtYXJxdWUgcHJvcG9zZSBkZXMgbW9udHVyZXMgYXUgc3R5bGUgbWluaW1hbGlzdGUsIGluc3BpcsOpZXMgcGFyIGxhIHBoaWxvc29waGllIHplbiwgYWxsaWFudCDDqWzDqWdhbmNlIGV0IHNvYnJpw6l0w6kgcG91ciB1bmUgZXN0aMOpdGlxdWUgaW50ZW1wb3JlbGxlLjwvbGk+DQogICAgICAgICAgICA8bGk+PGI+w4ljcmluIGFydGlzYW5hbCA6IDwvYj5DaGFxdWUgcGFpcmUgZGUgbHVuZXR0ZXMgZXN0IGFjY29tcGFnbsOpZSBkJ3VuIMOpdHVpIGZhYnJpcXXDqSBhdSBKYXBvbiDDoCBwYXJ0aXIgZGUgcGFwaWVyIHdhc2hpIGZhaXQgbWFpbiwgbWV0dGFudCBlbiB2YWxldXIgbGUgc2F2b2lyLWZhaXJlIHRyYWRpdGlvbm5lbCBqYXBvbmFpcyBldCBvZmZyYW50IHVuZSBwcm90ZWN0aW9uIMOpbMOpZ2FudGUgcG91ciBsZXMgbW9udHVyZXM8L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQoNCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9jYXJkIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4NCiAgICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0cy9pbWcvbWFycXVlcy9QYXByaWthL3Bsdi92aXN1ZWwtcGx2LW9wdGlxdWUtcGFudGhlcmUtcG0tcGFwcmlrYS5qcGciIGFsdD0iUGFwcmlrYSIgLz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InRvZ2dsZS1idG4iPg0KICAgICAgICAgIDxoMz5QYXByaWthPC9oMz4NCiAgICAgICAgICA8aSBjbGFzcz0iYmkgYmktY2FyZXQtZG93biI+PC9pPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3BlZWNoIj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5EZXNpZ24gbHVkaXF1ZSBldCBjb2xvcsOpIDo8L3N0cm9uZz4gUGFwcmlrYSBwcm9wb3NlIGRlcyBtb250dXJlcyBhdXggY291bGV1cnMgdml2ZXMgZXQgYXV4IGZvcm1lcyBvcmlnaW5hbGVzLCBzcMOpY2lhbGVtZW50IGNvbsOndWVzIHBvdXIgw6lnYXllciBsZSB2aXNhZ2UgZGVzIGVuZmFudHMuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPkFkYXB0YXRpb24gYXV4IHBlcnNvbm5hbGl0w6lzIGFmZmlybcOpZXMgOjwvc3Ryb25nPiBMZXMgbW9kw6hsZXMgc29udCBwZW5zw6lzIHBvdXIgY29ycmVzcG9uZHJlIGF1eCBjYXJhY3TDqHJlcyBiaWVuIHRyZW1ww6lzIGRlcyBwbHVzIGpldW5lcywgb2ZmcmFudCBkZXMgZGVzaWducyBxdWkgcmVmbMOodGVudCBsZXVyIMOpbmVyZ2llIGV0IGxldXIgaW5kaXZpZHVhbGl0w6kuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPlLDqXNpc3RhbmNlIGV0IGZsZXhpYmlsaXTDqSA6PC9zdHJvbmc+IENvbsOndWVzIHBvdXIgc3VwcG9ydGVyIGxlcyBhY3Rpdml0w6lzIGR5bmFtaXF1ZXMgZGVzIGVuZmFudHMsIGxlcyBtb250dXJlcyBQYXByaWthIGFsbGllbnQgcm9idXN0ZXNzZSBldCBzb3VwbGVzc2UsIGdhcmFudGlzc2FudCBkdXJhYmlsaXTDqSBldCBjb25mb3J0IGF1IHF1b3RpZGllbi48L2xpPg0KICAgICAgICAgICAgPGxpPjxzdHJvbmc+QXV0b25vbWllIGRlcyBlbmZhbnRzIDo8L3N0cm9uZz4gR3LDomNlIMOgIGxldXIgY29uY2VwdGlvbiBwcmF0aXF1ZSwgbGVzIGx1bmV0dGVzIFBhcHJpa2EgcGVybWV0dGVudCBhdXggZW5mYW50cyBkZSBsZXMgbWFuaXB1bGVyIGZhY2lsZW1lbnQsIGZhdm9yaXNhbnQgYWluc2kgbGV1ciBpbmTDqXBlbmRhbmNlIHNhbnMgbsOpY2Vzc2l0ZXIgbCdhaWRlIGNvbnN0YW50ZSBkZXMgcGFyZW50cy48L2xpPg0KICAgICAgICAgICAgPGxpPjxzdHJvbmc+TWFycXVlIGZyYW7Dp2Fpc2UgZMOpZGnDqWUgYXV4IGVuZmFudHMgOjwvc3Ryb25nPiBQYXByaWthIGVzdCB1bmUgbWFycXVlIGZyYW7Dp2Fpc2UgcXVpIHNlIGNvbnNhY3JlIGV4Y2x1c2l2ZW1lbnQgw6AgbGEgY3LDqWF0aW9uIGRlIGx1bmV0dGVzIHBvdXIgZW5mYW50cywgbWV0dGFudCBsJ2FjY2VudCBzdXIgZGVzIGRlc2lnbnMgdGVuZGFuY2UgZXQgZGVzIGNvbWJpbmFpc29ucyBkZSBjb3VsZXVycyBhY3R1ZWxsZXMuPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZGl2Pg0KDQogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfY2FyZCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImltZyI+DQogICAgICAgICAgPGltZyBzcmM9Ii9hc3NldHMvaW1nL21hcnF1ZXMvTWFsdC9wbHYvcGx2LW9wdGlxdWUtaG9tbWUtbWFsdC0yMDIzLmpwZyIgYWx0PSJNYWx0IiAvPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0idG9nZ2xlLWJ0biI+DQogICAgICAgICAgPGgzPk1hbHQ8L2gzPg0KICAgICAgICAgIDxpIGNsYXNzPSJiaSBiaS1jYXJldC1kb3duIj48L2k+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJzcGVlY2giPg0KICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPk9yaWdpbmUgYmVsZ2UgaW5kw6lwZW5kYW50ZSA6PC9zdHJvbmc+IE1hbHQgZXN0IHVuZSBtYXJxdWUgZGUgbHVuZXR0ZXMgYmVsZ2UgZXQgaW5kw6lwZW5kYW50ZSwgcmVjb25udWUgcG91ciBzb24gc2F2b2lyLWZhaXJlIGV0IHNvbiBkZXNpZ24gaW5ub3ZhbnQuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPkRlc2lnbiBzb2JyZSBldCBjaGljIHBvdXIgaG9tbWVzIDo8L3N0cm9uZz4gU3DDqWNpYWxpc8OpZSBkYW5zIGxlcyBtb250dXJlcyBtYXNjdWxpbmVzLCBNYWx0IHByb3Bvc2UgZGVzIGx1bmV0dGVzIGF1eCBsaWduZXMgw6lwdXLDqWVzIGV0IMOpbMOpZ2FudGVzLCByZWZsw6l0YW50IHVuZSBlc3Row6l0aXF1ZSB2aXJpbGUgZXQgcmFmZmluw6llLjwvbGk+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5Bc3NvY2lhdGlvbnMgaW5ub3ZhbnRlcyBkZSBtYXTDqXJpYXV4IDo8L3N0cm9uZz4gTGEgbWFycXVlIHNlIGRpc3Rpbmd1ZSBwYXIgbCd1dGlsaXNhdGlvbiBjb21iaW7DqWUgZGUgbWF0w6lyaWF1eCB0ZWxzIHF1ZSBsJ2Fjw6l0YXRlLCBsZSBib2lzLCBsZSBtw6l0YWwgZXQgbGUgY2FyYm9uZSwgY3LDqWFudCBkZXMgbW9udHVyZXMgdW5pcXVlcyBldCBkdXJhYmxlcy48L2xpPg0KICAgICAgICAgICAgPGxpPjxzdHJvbmc+RXJnb25vbWllIGV0IGNvbmZvcnQgOjwvc3Ryb25nPiBMZXMgbW9udHVyZXMgTWFsdCBzb250IGNvbsOndWVzIHBvdXIgb2ZmcmlyIHVuZSBlcmdvbm9taWUgb3B0aW1hbGUsIGFzc3VyYW50IHVuIGFqdXN0ZW1lbnQgY29uZm9ydGFibGUgZXQgYWRhcHTDqSBhdXggYmVzb2lucyBkZXMgcG9ydGV1cnMuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPlN5bWJvbGUgZGlzdGluY3RpZiA6PC9zdHJvbmc+IENoYXF1ZSBwYWlyZSBkZSBsdW5ldHRlcyBhcmJvcmUgdW4gw6lwaSBkZSBtYWx0IGltcHJpbcOpIGF1IGJvdXQgZGUgY2hhcXVlIGJyYW5jaGUsIHJlbmRhbnQgaG9tbWFnZSDDoCBsYSBjdWx0dXJlIGJlbGdlIGRlIGxhIGJpw6hyZSBldCBham91dGFudCB1bmUgdG91Y2hlIGQnYXV0aGVudGljaXTDqS48L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQoNCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9jYXJkIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4NCiAgICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0cy9pbWcvbWFycXVlcy9DbMOpbWVuY2UtJi1NYXJnYXV4L3Bsdi9QTFYtTWFyZ2F1eC1ldC1DbGVtZW5jZS5qcGciIGFsdD0iQ2zDqW1lbmNlICYgTWFyZ2F1eCIgLz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InRvZ2dsZS1idG4iPg0KICAgICAgICAgIDxoMz5DbMOpbWVuY2UgJiBNYXJnYXV4PC9oMz4NCiAgICAgICAgICA8aSBjbGFzcz0iYmkgYmktY2FyZXQtZG93biI+PC9pPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3BlZWNoIj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5DcsOpYXRpb24gcGFyIGRldXggc8WTdXJzIHBhc3Npb25uw6llcyA6PC9zdHJvbmc+IENsw6ltZW5jZSBldCBNYXJnYXV4LCBkZXV4IGpldW5lcyBzxZN1cnMsIG9udCBmb25kw6kgbGEgbWFycXVlIGVuIGNvbWJpbmFudCBsZXVycyB0YWxlbnRzIGV0IGxldXIgY29tcGxpY2l0w6kgcG91ciBwcm9wb3NlciBkZXMgbW9kw6hsZXMgZGUgbHVuZXR0ZXMgcmVmbMOpdGFudCBsZXVyIGVzcHJpdCB1bmlxdWUuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPkluc3BpcmF0aW9ucyBtb2RlIGV0IGRlc2lnbiA6PC9zdHJvbmc+IExlcyBjb2xsZWN0aW9ucyBwdWlzZW50IGxldXIgaW5zcGlyYXRpb24gZGFucyBsZXMgdW5pdmVycyBkZSBsYSBtb2RlIGV0IGR1IGRlc2lnbiwgb2ZmcmFudCBkZXMgbW9udHVyZXMgdGVuZGFuY2UgZXQgY29udGVtcG9yYWluZXMgYWRhcHTDqWVzIGF1eCBmZW1tZXMgbW9kZXJuZXMuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPk1hdMOpcmlhdXggZGUgaGF1dGUgcXVhbGl0w6kgOjwvc3Ryb25nPiBMZXMgbHVuZXR0ZXMgQ2zDqW1lbmNlICYgTWFyZ2F1eCBzb250IHByaW5jaXBhbGVtZW50IHLDqWFsaXPDqWVzIGVuIGFjw6l0YXRlLCBnYXJhbnRpc3NhbnQgdW5lIHF1YWxpdMOpIGV4Y2VwdGlvbm5lbGxlIGV0IHVuZSBkdXJhYmlsaXTDqSBhY2NydWUuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPkRlc2lnbnMgZnJhaXMgZXQgZMOpY2Fsw6lzIDo8L3N0cm9uZz4gTGEgbWFycXVlIHNlIGRpc3Rpbmd1ZSBwYXIgZGVzIG1vbnR1cmVzIMOpbMOpZ2FudGVzIGV0IGbDqW1pbmluZXMsIGFwcG9ydGFudCB1bmUgdG91Y2hlIGRlIGZyYcOuY2hldXIgZXQgZCdvcmlnaW5hbGl0w6kgw6AgY2hhcXVlIG1vZMOobGUuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPkxhcmdlIGdhbW1lIGRlIHByb2R1aXRzIDo8L3N0cm9uZz4gQ2zDqW1lbmNlICYgTWFyZ2F1eCBwcm9wb3NlIHVuZSB2YXN0ZSBzw6lsZWN0aW9uIGRlIGx1bmV0dGVzIG9wdGlxdWVzIGV0IHNvbGFpcmVzLCBhaW5zaSBxdWUgZGVzIGFjY2Vzc29pcmVzLCByw6lwb25kYW50IGF1eCBiZXNvaW5zIGV0IGF1eCBlbnZpZXMgZGUgY2hhcXVlIGZlbW1lLjwvbGk+DQogICAgICAgICAgPC9vbD4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Rpdj4NCg0KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyX2NhcmQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJpbWciPg0KICAgICAgICAgIDxpbWcgc3JjPSIvYXNzZXRzL2ltZy9tYXJxdWVzL0NhemFsL3Bsdi9jYXphbC1wbHYyLmpwZWciIGFsdD0iQ2F6YWwiIC8+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJ0b2dnbGUtYnRuIj4NCiAgICAgICAgICA8aDM+Q2F6YWw8L2gzPg0KICAgICAgICAgIDxpIGNsYXNzPSJiaSBiaS1jYXJldC1kb3duIj48L2k+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJzcGVlY2giPg0KICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPlVuIHN0eWxlIHZpbnRhZ2UgcmFmZmluw6kgOjwvc3Ryb25nPiBDYXphbCBwcm9wb3NlIGRlcyBtb2TDqGxlcyBhdXggZm9ybWVzIMOpbMOpZ2FudGVzIGV0IGludGVtcG9yZWxsZXMsIGlkw6lhbGVzIHBvdXIgY2V1eCBxdWkgcmVjaGVyY2hlbnQgdW5lIG1vbnR1cmUgYXZlYyB1biBjaGFybWUgcsOpdHJvLjwvbGk+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5EZXMgbW9udHVyZXMgb3ZlcnNpemUgZXQgbWFycXXDqWVzIDo8L3N0cm9uZz4gTGEgbWFycXVlIGVzdCBjb25udWUgcG91ciBzZXMgbHVuZXR0ZXMgYXV4IGZvcm1lcyBpbXBvc2FudGVzIGV0IGF1eCBkw6l0YWlscyBzb3BoaXN0aXF1w6lzLCBzb3V2ZW50IGFwcHLDqWNpw6llcyBwYXIgdW5lIGNsaWVudMOobGUgY2hlcmNoYW50IMOgIGFmZmlybWVyIHNvbiBzdHlsZS48L2xpPg0KICAgICAgICAgICAgPGxpPjxzdHJvbmc+RGVzIG1hdMOpcmlhdXggZGUgaGF1dGUgcXVhbGl0w6kgOjwvc3Ryb25nPiBMZXMgbHVuZXR0ZXMgQ2F6YWwgc29udCBmYWJyaXF1w6llcyBlbiBhY8OpdGF0ZSBwcmVtaXVtIGV0IGVuIG3DqXRhbCBkb3LDqSBvdSBwbGFxdcOpIG9yLCBnYXJhbnRpc3NhbnQgZHVyYWJpbGl0w6kgZXQgY29uZm9ydC48L2xpPg0KICAgICAgICAgICAgPGxpPjxzdHJvbmc+VW4gY29uZm9ydCBvcHRpbWFsIDo8L3N0cm9uZz4gTGVzIGRlc2lnbnMgc29udCBwZW5zw6lzIHBvdXIgb2ZmcmlyIHVuIGJvbiBtYWludGllbiBldCB1biBwb3J0IGFncsOpYWJsZSwgcsOpcG9uZGFudCBhdXggYmVzb2lucyBk4oCZdW4gcHVibGljIGV4aWdlYW50LjwvbGk+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5VbmUgdG91Y2hlIGTigJlleGNlbnRyaWNpdMOpIGFzc3Vtw6llIDo8L3N0cm9uZz4gTcOqbWUgZGFucyBzZXMgbW9kw6hsZXMgcGx1cyBjbGFzc2lxdWVzLCBDYXphbCBjb25zZXJ2ZSB1bmUgc2lnbmF0dXJlIGF1ZGFjaWV1c2UgYXZlYyBkZXMgZmluaXRpb25zIGx1eHVldXNlcyBldCBkZXMgamV1eCBkZSBjb3VsZXVycyBkaXN0aW5jdGlmcy48L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQoNCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9jYXJkIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4NCiAgICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0cy9pbWcvbWFycXVlcy9BcG9uZW0vcGx2L2x1bmV0dGVzLWNsaXBzLmpwZyIgYWx0PSJBcG9uZW0iIC8+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJ0b2dnbGUtYnRuIj4NCiAgICAgICAgICA8aDM+QXBvbmVtPC9oMz4NCiAgICAgICAgICA8aSBjbGFzcz0iYmkgYmktY2FyZXQtZG93biI+PC9pPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3BlZWNoIj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5EZXNpZ24gYXVkYWNpZXV4IGV0IGNvbnRlbXBvcmFpbiA6PC9zdHJvbmc+IMOEcG9uZW0gcHJvcG9zZSBkZXMgbW9udHVyZXMgYXV4IGZvcm1lcyBnw6lvbcOpdHJpcXVlcyBldCBhdXggY291bGV1cnMgdml2ZXMsIGFsbGlhbnQgbW9kZXJuaXTDqSBldCBvcmlnaW5hbGl0w6kgcG91ciByZWZsw6l0ZXIgbGEgcGVyc29ubmFsaXTDqSB1bmlxdWUgZGUgY2hhcXVlIHBvcnRldXIuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPk1hdMOpcmlhdXggZGUgaGF1dGUgcXVhbGl0w6kgOjwvc3Ryb25nPiBMZXMgbHVuZXR0ZXMgc29udCBmYWJyaXF1w6llcyDDoCBwYXJ0aXIgZGUgbWF0w6lyaWF1eCBwcmVtaXVtIHRlbHMgcXVlIGwnYWPDqXRhdGUgZXQgbGUgbcOpdGFsLCBnYXJhbnRpc3NhbnQgZHVyYWJpbGl0w6kgZXQgY29uZm9ydC48L2xpPg0KICAgICAgICAgICAgPGxpPjxzdHJvbmc+TW9udHVyZXMgY29tYmluw6llcyBhdmVjIGNsaXBzIHNvbGFpcmVzIDo8L3N0cm9uZz4gQ2VydGFpbnMgbW9kw6hsZXMgc29udCBjb27Dp3VzIGF2ZWMgZGVzIGNsaXBzIHNvbGFpcmVzIHBvbGFyaXPDqXMsIG9mZnJhbnQgdW5lIHNvbHV0aW9uIHByYXRpcXVlIGV0IMOpbMOpZ2FudGUgcG91ciBsZXMgcG9ydGV1cnMgZGUgbHVuZXR0ZXMgZGUgdnVlLjwvbGk+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5Db2xsZWN0aW9uIHZhcmnDqWUgcG91ciB0b3VzIGxlcyBzdHlsZXMgOjwvc3Ryb25nPiDDhHBvbmVtIHByb3Bvc2UgdW5lIGdhbW1lIGRlIG1vbnR1cmVzIG9wdGlxdWVzIGVuIG3DqXRhbCwgZW4gYWPDqXRhdGUgb3UgZW4gY29tYmluYWlzb24sIGFkYXB0w6llcyDDoCBkaWZmw6lyZW50cyBzdHlsZXMgZXQgcHLDqWbDqXJlbmNlcy48L2xpPg0KICAgICAgICAgICAgPGxpPjxzdHJvbmc+RW5nYWdlbWVudCBlbnZlcnMgbCdpbmRpdmlkdWFsaXTDqSA6PC9zdHJvbmc+IExhIG1hcnF1ZSBlbmNvdXJhZ2UgbGVzIHBvcnRldXJzIMOgIGV4cHJpbWVyIGxldXIgY2FyYWN0w6hyZSBldCBsZXVyIGluZGl2aWR1YWxpdMOpIMOgIHRyYXZlcnMgZGVzIGRlc2lnbnMgdW5pcXVlcyBldCBwZXJzb25uYWxpc8Opcy48L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQoNCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9jYXJkIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4NCiAgICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0cy9pbWcvbWFycXVlcy9CYWxpL3Bsdi9wbHYyLWJhbGkuanBlZyIgYWx0PSJCYWxpIiAvPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0idG9nZ2xlLWJ0biI+DQogICAgICAgICAgPGgzPkJhbGk8L2gzPg0KICAgICAgICAgIDxpIGNsYXNzPSJiaSBiaS1jYXJldC1kb3duIj48L2k+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJzcGVlY2giPg0KICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPkRlc2lnbiBpbnNwaXLDqSBkZSBCYWxpIGV0IGRlIFBhcmlzIDo8L3N0cm9uZz4gRm9uZMOpZSBwYXIgbGEgZGVzaWduZXIgVmFuZXNzYSBXYW5nLCBCYWxpIEV5ZXdlYXIgZnVzaW9ubmUgbCfDqWzDqWdhbmNlIHBhcmlzaWVubmUgYXZlYyBsJ2V4b3Rpc21lIGRlIEJhbGksIGNyw6lhbnQgZGVzIG1vbnR1cmVzIHVuaXF1ZXMgZXQgcmFmZmluw6llcy48L2xpPg0KICAgICAgICAgICAgPGxpPjxzdHJvbmc+Q29sbGVjdGlvbiB2YXJpw6llIDo8L3N0cm9uZz4gTGEgbWFycXVlIHByb3Bvc2UgdW5lIGdhbW1lIGNvbXBsw6h0ZSBkZSBsdW5ldHRlcyBvcHRpcXVlcyBldCBzb2xhaXJlcywgYWRhcHTDqWVzIMOgIGRpZmbDqXJlbnRzIHN0eWxlcyBldCBiZXNvaW5zLjwvbGk+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5NYXTDqXJpYXV4IGRlIHF1YWxpdMOpIDo8L3N0cm9uZz4gTGVzIG1vbnR1cmVzIHNvbnQgZmFicmlxdcOpZXMgw6AgcGFydGlyIGRlIG1hdMOpcmlhdXggcHJlbWl1bSB0ZWxzIHF1ZSBsJ2Fjw6l0YXRlIGV0IGxlIG3DqXRhbCwgYXNzdXJhbnQgZHVyYWJpbGl0w6kgZXQgY29uZm9ydC48L2xpPg0KICAgICAgICAgICAgPGxpPjxzdHJvbmc+RXN0aMOpdGlxdWUgbW9kZXJuZSBldCDDqWzDqWdhbnRlIDo8L3N0cm9uZz4gQmFsaSBFeWV3ZWFyIHNlIGRpc3Rpbmd1ZSBwYXIgZGVzIGRlc2lnbnMgY29udGVtcG9yYWlucywgYWxsaWFudCBmb3JtZXMgZ8Opb23DqXRyaXF1ZXMgZXQgY291bGV1cnMgdGVuZGFuY2UgcG91ciB1biBsb29rIGNoaWMgZXQgdXJiYWluLjwvbGk+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5FbmdhZ2VtZW50IGVudmVycyBsYSBxdWFsaXTDqSA6PC9zdHJvbmc+IExhIG1hcnF1ZSBtZXQgbCdhY2NlbnQgc3VyIHVuZSBxdWFsaXTDqSBleGNlcHRpb25uZWxsZSBldCB1bmUgcHJvdGVjdGlvbiBVViBlc3NlbnRpZWxsZSwgZ2FyYW50aXNzYW50IMOgIGxhIGZvaXMgc3R5bGUgZXQgc8OpY3VyaXTDqSBwb3VyIGxlcyBwb3J0ZXVycy48L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQoNCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl9jYXJkIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iaW1nIj4NCiAgICAgICAgICA8aW1nIHNyYz0iL2Fzc2V0cy9pbWcvbWFycXVlcy9BbmR5LWJyb29rL3Bsdi9wbHYtYW5keS1icm9vay5qcGciIGFsdD0iQW5keSBicm9vayIgLz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InRvZ2dsZS1idG4iPg0KICAgICAgICAgIDxoMz5BbmR5IGJyb29rPC9oMz4NCiAgICAgICAgICA8aSBjbGFzcz0iYmkgYmktY2FyZXQtZG93biI+PC9pPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3BlZWNoIj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5EZXNpZ24gbW9kZXJuZSBldCB0ZW5kYW5jZSA6PC9zdHJvbmc+IEFuZHkgQnJvb2sgcHJvcG9zZSBkZXMgbW9udHVyZXMgYXUgc3R5bGUgY29udGVtcG9yYWluLCBhbGxpYW50IGZpbmVzc2UgZXQgb3JpZ2luYWxpdMOpLCBhZGFwdMOpZXMgYXV4IGdvw7t0cyBhY3R1ZWxzLjwvbGk+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5NYXTDqXJpYXV4IGRlIHF1YWxpdMOpIDo8L3N0cm9uZz4gTGVzIGx1bmV0dGVzIHNvbnQgZmFicmlxdcOpZXMgw6AgcGFydGlyIGRlIG1hdMOpcmlhdXggcHJlbWl1bSB0ZWxzIHF1ZSBsJ2Fjw6l0YXRlIGV0IGxlIG3DqXRhbCwgZ2FyYW50aXNzYW50IGR1cmFiaWxpdMOpIGV0IGNvbmZvcnQuPC9saT4NCiAgICAgICAgICAgIDxsaT48c3Ryb25nPkFjY2Vzc2liaWxpdMOpIDo8L3N0cm9uZz4gTGEgbWFycXVlIG9mZnJlIGRlcyBwcm9kdWl0cyBkZSBxdWFsaXTDqSDDoCBkZXMgcHJpeCBjb21ww6l0aXRpZnMsIHBlcm1ldHRhbnQgw6AgdW4gbGFyZ2UgcHVibGljIGQnYWNjw6lkZXIgw6AgZGVzIGx1bmV0dGVzIHN0eWzDqWVzIHNhbnMgZMOpcGFzc2VyIGxldXIgYnVkZ2V0LjwvbGk+DQogICAgICAgICAgICA8bGk+PHN0cm9uZz5QcsOpc2VuY2Ugw6l0ZW5kdWUgOjwvc3Ryb25nPiBBbmR5IEJyb29rIGVzdCBkaXNwb25pYmxlIGRhbnMgcGx1cyBkZSAxIDUwMCBvcHRpY2llbnMgcsOpcHV0w6lzIGVuIEZyYW5jZSwgZmFjaWxpdGFudCBsJ2FjY8OocyDDoCBzZXMgY29sbGVjdGlvbnMgaGF1dCBkZSBnYW1tZS48L2xpPg0KICAgICAgICAgICAgPGxpPjxzdHJvbmc+RW5nYWdlbWVudCBlbnZlcnMgbCdhcnRpc2FuYXQgOjwvc3Ryb25nPiBMZXMgbW9udHVyZXMgc29udCBjb27Dp3VlcyBldCBmYWJyaXF1w6llcyDDoCBsYSBtYWluIGF2ZWMgc29pbiBldCBwZXJmZWN0aW9uLCBvZmZyYW50IHVuZSBleHDDqXJpZW5jZSB1bmlxdWUgYXV4IHBvcnRldXJzLjwvbGk+DQogICAgICAgICAgPC9vbD4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Rpdj4NCg0KICAgIDwvZGl2Pg0KICA8L21haW4+DQogIDw/cGhwIGluY2x1ZGUgX19ESVJfXyAuICcvLi4vdGVtcGxhdGVzL2Zvb3Rlci5waHAnID8+DQogIDxzY3JpcHQgZGVmZXI+DQogICAgbGV0IGNvbnRhaW5lcl9jYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIi5jb250YWluZXJfY2FyZCIpOw0KICAgIGxldCBidXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLnRvZ2dsZS1idG4iKTsNCg0KICAgIGJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uLCBpbmRleCkgPT4gew0KICAgICAgbGV0IGNvbnRhaW5lcl9jYXJkID0gY29udGFpbmVyX2NhcmRzW2luZGV4XTsgLy8gQXNzb2NpZSBsZSBib24gY29udGFpbmVyIGF1IGJvdXRvbg0KDQogICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoKSA9PiB7DQogICAgICAgIGNvbnRhaW5lcl9jYXJkLmNsYXNzTGlzdC50b2dnbGUoImV4cGFuZGVkIik7DQogICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKCJhY3RpdmUiKTsNCg0KICAgICAgICAvLyBEw6lmaWxlbWVudCB2ZXJzIGxlIGNvbnRhaW5lciBjYXJkIHBvdXIgYWZmaWNoZXIgbGEgZMOpZmluaXRpb24gcydpbCBlc3QgZMOpcGxpw6kgZMOpZmlsZXIganVzcXUnw6AgbGEgZmluLi4uc21vb3RoPWTDqWZpbGVtZW50IGxlbnQNCiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7DQogICAgICAgICAgY29udGFpbmVyX2NhcmQuc2Nyb2xsSW50b1ZpZXcoew0KICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLA0KICAgICAgICAgICAgYmxvY2s6IGNvbnRhaW5lcl9jYXJkLmNsYXNzTGlzdC5jb250YWlucygiZXhwYW5kZWQiKSA/ICdlbmQnIDogJ3N0YXJ0Jw0KICAgICAgICAgIH0pOw0KICAgICAgICB9LCA2MDApOw0KICAgICAgfSk7DQogICAgfSk7DQogIDwvc2NyaXB0Pg0KPC9ib2R5Pg0KDQo8L2h0bWw+IjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGRvY0Jsb2NrIjtOO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";