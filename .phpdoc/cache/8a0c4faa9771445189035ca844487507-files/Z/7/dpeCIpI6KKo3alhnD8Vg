1745997771
8a0c4faa9771445189035ca844487507-phpdoc%3A111e3c67733a6ae9c853401e8b8c7694-3bffd66d8a47410170bad2463a7984dc
s:48484:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjE5OiJmb25jdGlvbnNfZmFybXMucGhwIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjY6e3M6MTU6IlxkaXNwbGF5Q2FyZHMoKSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8iOjk6e3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBhcmd1bWVudHMiO2E6MDp7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTg0O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjEwO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MTU6IlxkaXNwbGF5Q2FyZHMoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEyOiJkaXNwbGF5Q2FyZHMiO31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AZG9jQmxvY2siO047czo2MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGhhc1JldHVybkJ5UmVmZXJlbmNlIjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAG1ldGFkYXRhIjthOjA6e31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AYXR0cmlidXRlcyI7YTowOnt9fXM6MTc6IlxkaXNwbGF5R2xhc3NlcygpIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXyI6OTp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NzoiZ2xhc3NlcyI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjEyO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjMxO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MTc6IlxkaXNwbGF5R2xhc3NlcygpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTQ6ImRpc3BsYXlHbGFzc2VzIjt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGRvY0Jsb2NrIjtOO3M6NjA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBtZXRhZGF0YSI7YTowOnt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGF0dHJpYnV0ZXMiO2E6MDp7fX1zOjE1OiJcZGlzcGxheUJyYW5kKCkiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fIjo5OntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AYXJndW1lbnRzIjthOjA6e31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjIzNztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI0NTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjE1OiJcZGlzcGxheUJyYW5kKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMjoiZGlzcGxheUJyYW5kIjt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGRvY0Jsb2NrIjtOO3M6NjA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBtZXRhZGF0YSI7YTowOnt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGF0dHJpYnV0ZXMiO2E6MDp7fX1zOjEzOiJcaW5zZXJ0RGF0YSgpIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXyI6OTp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGFyZ3VtZW50cyI7YTozOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NToidGFibGUiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MTtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo3OiJjb2x1bW5zIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NjoidmFsdWVzIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyNTQ7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyNzk7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoxMzoiXGluc2VydERhdGEoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEwOiJpbnNlcnREYXRhIjt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGRvY0Jsb2NrIjtOO3M6NjA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBtZXRhZGF0YSI7YTowOnt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGF0dHJpYnV0ZXMiO2E6MDp7fX1zOjEwOiJcYWRkSXRlbSgpIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXyI6OTp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGFyZ3VtZW50cyI7YTozOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NDoibmFtZSI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToxO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjU6InByaWNlIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NToic3RvY2siO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI4MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI4ODtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjEwOiJcYWRkSXRlbSgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6NzoiYWRkSXRlbSI7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBkb2NCbG9jayI7TjtzOjYwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AbWV0YWRhdGEiO2E6MDp7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBhdHRyaWJ1dGVzIjthOjA6e319czoxMzoiXGFkZEdsYXNzZXMoKSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8iOjk6e3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBhcmd1bWVudHMiO2E6OTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjU6ImNvbG9yIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NjoibWF0dGVyIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NToic2hhcGUiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MztPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czoxMDoiaW1hZ2VfcGF0aCI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aTo0O086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjEwOiJpbWFnZV9uYW1lIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjU7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6MTE6ImlkX2NhdGVnb3J5IjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjY7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6OToiaWRfZ2VuZGVyIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjc7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6OToiaWRfYnJhbmRzIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjg7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoiaWRfaXRlbXMiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI5MztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjMwMTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZ1bmN0aW9uXwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjEzOiJcYWRkR2xhc3NlcygpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTA6ImFkZEdsYXNzZXMiO31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AZG9jQmxvY2siO047czo2MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAGhhc1JldHVybkJ5UmVmZXJlbmNlIjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRnVuY3Rpb25fAG1ldGFkYXRhIjthOjA6e31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGdW5jdGlvbl8AYXR0cmlidXRlcyI7YTowOnt9fX1zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjNiZmZkNjZkOGE0NzQxMDE3MGJhZDI0NjNhNzk4NGRjIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NTg6ImxhLWx1bmV0dGVyaWUtU2VubGlzaWVubmUgLSBNVkMvbW9kZWxzL2ZvbmN0aW9uc19mYXJtcy5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjIyMDgyOiI8P3BocA0KDQoNCi8vIGZ1bmN0aW9uIGRpc3BsYXlDYXJkcygpDQovLyB7DQoNCi8vICAgICAgIGlmICghZW1wdHkoJF9HRVRbJ2JyYW5kcyddKSAmJiBpc19hcnJheSgkX0dFVFsnYnJhbmRzJ10pKSB7DQovLyAgICAgICAgICAgICAkYnJhbmRzID0gJF9HRVRbJ2JyYW5kcyddOw0KDQovLyAgICAgICAgICAgICBmb3JlYWNoICgkYnJhbmRzIGFzICRicmFuZCkgew0KDQoNCi8vICAgICAgICAgICAgICAgICAgICRkaXNwbGF5QnJhbmQgPSBzZWFyY2hCeUJyYW5kKCRicmFuZCk7DQoNCi8vICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRkaXNwbGF5QnJhbmQgYXMgJGx1bmV0dGUpIHsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgICRpZEdsYXNzZXMgPSAkbHVuZXR0ZVsnaWRfZ2xhc3NlcyddOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiPGRpdiBjbGFzcz0nY2FyZHMnIGlkPSdsdW5ldHRlJyBkYXRhLWlkPSciIC4gaW50dmFsKCRpZEdsYXNzZXMpIC4gIic+IjsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxpbWcgc3JjPSInIC4gaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnaW1hZ2VfcGF0aCddKSAuICciIGFsdD0iTHVuZXR0ZSBkZSBtYXJxdWUgJyAuIGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ2ltYWdlX25hbWUnXSkgLiAnIiBzdHlsZT0id2lkdGg6IDEwMCU7IGhlaWdodDogMTUwcHg7IiBjbGFzcz0iaW1nIj4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGgzPicgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ25hbWUnXSkpIC4gJzwvaDM+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPlByaXg6ICcgLiBpbnR2YWwoJGx1bmV0dGVbJ3ByaWNlJ10pIC4gJ+KCrDwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHA+Q291bGV1cjogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnY29sb3InXSkpIC4gJzwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHA+TWF0acOocmU6ICcgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ21hdHRlciddKSkgLiAnPC9wPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8cD5HZW5yZTogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnZ2VuZGVyJ10pKSAuICc8L3A+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPkNhdMOpZ29yaWU6ICcgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ2NhdGVnb3J5J10pKSAuICc8L3A+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPk1hcnF1ZTogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnYnJhbmQnXSkpIC4gJzwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGRpdiBjbGFzcz0iZm9vdGVyQ2FyZHMiPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICI8YnV0dG9uICBjbGFzcz0nYnV0dG9uUHVzaENhcnQnPkFqb3V0ZXIgYXUgcGFuaWVyPC9pPjwvYnV0dG9uPiI7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICI8aSBjbGFzcz0nYmkgYmktaGVhcnQtZmlsbCc+PC9pPiI7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8L2Rpdj4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiPC9kaXY+IjsNCi8vICAgICAgICAgICAgICAgICAgIH0NCi8vICAgICAgICAgICAgIH0NCi8vICAgICAgIH0gZWxzZWlmICghZW1wdHkoJF9HRVRbJ3NoYXBlcyddKSAmJiBpc19hcnJheSgkX0dFVFsnc2hhcGVzJ10pKSB7DQovLyAgICAgICAgICAgICAkc2hhcGVzID0gJF9HRVRbJ3NoYXBlcyddOw0KDQovLyAgICAgICAgICAgICBmb3JlYWNoICgkc2hhcGVzIGFzICRzaGFwZSkgew0KDQoNCi8vICAgICAgICAgICAgICAgICAgICRkaXNwbGF5U2hhcGUgPSBzZWFyY2hCeVNoYXBlKCRzaGFwZSk7DQoNCi8vICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRkaXNwbGF5U2hhcGUgYXMgJGx1bmV0dGUpIHsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgICRpZEdsYXNzZXMgPSAkbHVuZXR0ZVsnaWRfZ2xhc3NlcyddOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiPGRpdiBjbGFzcz0nY2FyZHMnIGlkPSdsdW5ldHRlJyBkYXRhLWlkPSciIC4gaW50dmFsKCRpZEdsYXNzZXMpIC4gIic+IjsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxpbWcgc3JjPSInIC4gaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnaW1hZ2VfcGF0aCddKSAuICciIGFsdD0iTHVuZXR0ZSBkZSBtYXJxdWUgJyAuIGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ2ltYWdlX25hbWUnXSkgLiAnIiBzdHlsZT0id2lkdGg6IDEwMCU7IGhlaWdodDogMTUwcHg7IiBjbGFzcz0iaW1nIj4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGgzPicgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ25hbWUnXSkpIC4gJzwvaDM+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPlByaXg6ICcgLiBpbnR2YWwoJGx1bmV0dGVbJ3ByaWNlJ10pIC4gJ+KCrDwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHA+Q291bGV1cjogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnY29sb3InXSkpIC4gJzwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHA+TWF0acOocmU6ICcgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ21hdHRlciddKSkgLiAnPC9wPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8cD5HZW5yZTogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnZ2VuZGVyJ10pKSAuICc8L3A+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPkNhdMOpZ29yaWU6ICcgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ2NhdGVnb3J5J10pKSAuICc8L3A+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPk1hcnF1ZTogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnYnJhbmQnXSkpIC4gJzwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGRpdiBjbGFzcz0iZm9vdGVyQ2FyZHMiPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICI8YnV0dG9uICBjbGFzcz0nYnV0dG9uUHVzaENhcnQnPkFqb3V0ZXIgYXUgcGFuaWVyPC9pPjwvYnV0dG9uPiI7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICI8aSBjbGFzcz0nYmkgYmktaGVhcnQtZmlsbCc+PC9pPiI7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8L2Rpdj4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiPC9kaXY+IjsNCi8vICAgICAgICAgICAgICAgICAgIH0NCi8vICAgICAgICAgICAgIH0NCi8vICAgICAgIH0gZWxzZWlmICghZW1wdHkoJF9HRVRbJ21hdHRlcnMnXSkgJiYgaXNfYXJyYXkoJF9HRVRbJ21hdHRlcnMnXSkpIHsNCi8vICAgICAgICAgICAgICRtYXR0ZXJzID0gJF9HRVRbJ21hdHRlcnMnXTsNCg0KLy8gICAgICAgICAgICAgZm9yZWFjaCAoJG1hdHRlcnMgYXMgJG1hdHRlcikgew0KDQoNCi8vICAgICAgICAgICAgICAgICAgICRkaXNwbGF5TWF0dGVyID0gc2VhcmNoQnlNYXR0ZXIoJG1hdHRlcik7DQovLyAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkZGlzcGxheU1hdHRlciBhcyAkbHVuZXR0ZSkgew0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgJGlkR2xhc3NlcyA9ICRsdW5ldHRlWydpZF9nbGFzc2VzJ107DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICI8ZGl2IGNsYXNzPSdjYXJkcycgaWQ9J2x1bmV0dGUnIGRhdGEtaWQ9JyIgLiBpbnR2YWwoJGlkR2xhc3NlcykgLiAiJz4iOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGltZyBzcmM9IicgLiBodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWydpbWFnZV9wYXRoJ10pIC4gJyIgYWx0PSJMdW5ldHRlIGRlIG1hcnF1ZSAnIC4gaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnaW1hZ2VfbmFtZSddKSAuICciIHN0eWxlPSJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxNTBweDsiIGNsYXNzPSJpbWciPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8aDM+JyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnbmFtZSddKSkgLiAnPC9oMz4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHA+UHJpeDogJyAuIGludHZhbCgkbHVuZXR0ZVsncHJpY2UnXSkgLiAn4oKsPC9wPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8cD5Db3VsZXVyOiAnIC4gdWNmaXJzdChodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWydjb2xvciddKSkgLiAnPC9wPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8cD5NYXRpw6hyZTogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnbWF0dGVyJ10pKSAuICc8L3A+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPkdlbnJlOiAnIC4gdWNmaXJzdChodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWydnZW5kZXInXSkpIC4gJzwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHA+Q2F0w6lnb3JpZTogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnY2F0ZWdvcnknXSkpIC4gJzwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHA+TWFycXVlOiAnIC4gdWNmaXJzdChodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWydicmFuZCddKSkgLiAnPC9wPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8ZGl2IGNsYXNzPSJmb290ZXJDYXJkcyI+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIjxidXR0b24gIGNsYXNzPSdidXR0b25QdXNoQ2FydCc+QWpvdXRlciBhdSBwYW5pZXI8L2k+PC9idXR0b24+IjsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIjxpIGNsYXNzPSdiaSBiaS1oZWFydC1maWxsJz48L2k+IjsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzwvZGl2Pic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICI8L2Rpdj4iOw0KLy8gICAgICAgICAgICAgICAgICAgfQ0KLy8gICAgICAgICAgICAgfQ0KLy8gICAgICAgfSBlbHNlaWYgKCFlbXB0eSgkX0dFVFsnZ2VuZGVycyddKSAmJiBpc19hcnJheSgkX0dFVFsnZ2VuZGVycyddKSkgew0KLy8gICAgICAgICAgICAgJGdlbmRlcnMgPSAkX0dFVFsnZ2VuZGVycyddOw0KDQovLyAgICAgICAgICAgICBmb3JlYWNoICgkZ2VuZGVycyBhcyAkZ2VuZGVyKSB7DQoNCi8vICAgICAgICAgICAgICAgICAgICRkaXNwbGF5R2VuZGVyID0gc2VhcmNoQnlHZW5kZXIoJGdlbmRlcik7DQovLyAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkZGlzcGxheUdlbmRlciBhcyAkbHVuZXR0ZSkgew0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgJGlkR2xhc3NlcyA9ICRsdW5ldHRlWydpZF9nbGFzc2VzJ107DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICI8ZGl2IGNsYXNzPSdjYXJkcycgaWQ9J2x1bmV0dGUnIGRhdGEtaWQ9JyIgLiBpbnR2YWwoJGlkR2xhc3NlcykgLiAiJz4iOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGltZyBzcmM9IicgLiBodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWydpbWFnZV9wYXRoJ10pIC4gJyIgYWx0PSJMdW5ldHRlIGRlIG1hcnF1ZSAnIC4gaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnaW1hZ2VfbmFtZSddKSAuICciIHN0eWxlPSJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxNTBweDsiIGNsYXNzPSJpbWciPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8aDM+JyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnbmFtZSddKSkgLiAnPC9oMz4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHA+UHJpeDogJyAuIGludHZhbCgkbHVuZXR0ZVsncHJpY2UnXSkgLiAn4oKsPC9wPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8cD5Db3VsZXVyOiAnIC4gdWNmaXJzdChodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWydjb2xvciddKSkgLiAnPC9wPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8cD5NYXRpw6hyZTogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnbWF0dGVyJ10pKSAuICc8L3A+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPkdlbnJlOiAnIC4gdWNmaXJzdChodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWydnZW5kZXInXSkpIC4gJzwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHA+Q2F0w6lnb3JpZTogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnY2F0ZWdvcnknXSkpIC4gJzwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHA+TWFycXVlOiAnIC4gdWNmaXJzdChodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWydicmFuZCddKSkgLiAnPC9wPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8ZGl2IGNsYXNzPSJmb290ZXJDYXJkcyI+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIjxidXR0b24gIGNsYXNzPSdidXR0b25QdXNoQ2FydCc+QWpvdXRlciBhdSBwYW5pZXI8L2k+PC9idXR0b24+IjsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIjxpIGNsYXNzPSdiaSBiaS1oZWFydC1maWxsJz48L2k+IjsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzwvZGl2Pic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICI8L2Rpdj4iOw0KLy8gICAgICAgICAgICAgICAgICAgfQ0KLy8gICAgICAgICAgICAgfQ0KLy8gICAgICAgfSBlbHNlaWYgKCFlbXB0eSgkX0dFVFsnY29sb3JzJ10pICYmIGlzX2FycmF5KCRfR0VUWydjb2xvcnMnXSkpIHsNCi8vICAgICAgICAgICAgICRjb2xvcnMgPSAkX0dFVFsnY29sb3JzJ107DQoNCi8vICAgICAgICAgICAgIGZvcmVhY2ggKCRjb2xvcnMgYXMgJGNvbG9yKSB7DQoNCi8vICAgICAgICAgICAgICAgICAgICRkaXNwbGF5Q29sb3JHbGFzc2VzID0gc2VhcmNoQnlDb2xvcigkY29sb3IpOw0KLy8gICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGRpc3BsYXlDb2xvckdsYXNzZXMgYXMgJGx1bmV0dGUpIHsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgICRpZEdsYXNzZXMgPSAkbHVuZXR0ZVsnaWRfZ2xhc3NlcyddOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiPGRpdiBjbGFzcz0nY2FyZHMnIGlkPSdsdW5ldHRlJyBkYXRhLWlkPSciIC4gaW50dmFsKCRpZEdsYXNzZXMpIC4gIic+IjsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxpbWcgc3JjPSInIC4gaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnaW1hZ2VfcGF0aCddKSAuICciIGFsdD0iTHVuZXR0ZSBkZSBtYXJxdWUgJyAuIGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ2ltYWdlX25hbWUnXSkgLiAnIiBzdHlsZT0id2lkdGg6IDEwMCU7IGhlaWdodDogMTUwcHg7IiBjbGFzcz0iaW1nIj4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGgzPicgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ25hbWUnXSkpIC4gJzwvaDM+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPlByaXg6ICcgLiBpbnR2YWwoJGx1bmV0dGVbJ3ByaWNlJ10pIC4gJ+KCrDwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHA+Q291bGV1cjogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnY29sb3InXSkpIC4gJzwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHA+TWF0acOocmU6ICcgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ21hdHRlciddKSkgLiAnPC9wPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8cD5HZW5yZTogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnZ2VuZGVyJ10pKSAuICc8L3A+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPkNhdMOpZ29yaWU6ICcgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ2NhdGVnb3J5J10pKSAuICc8L3A+JzsNCi8vICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPk1hcnF1ZTogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnYnJhbmQnXSkpIC4gJzwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGRpdiBjbGFzcz0iZm9vdGVyQ2FyZHMiPic7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICI8YnV0dG9uICBjbGFzcz0nYnV0dG9uUHVzaENhcnQnPkFqb3V0ZXIgYXUgcGFuaWVyPC9pPjwvYnV0dG9uPiI7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICI8aSBjbGFzcz0nYmkgYmktaGVhcnQtZmlsbCc+PC9pPiI7DQovLyAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8L2Rpdj4nOw0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiPC9kaXY+IjsNCi8vICAgICAgICAgICAgICAgICAgIH0NCi8vICAgICAgICAgICAgIH0NCi8vICAgICAgIH0gZWxzZSB7DQoNCi8vICAgICAgICAgICAgICRhZmZpY2hlckx1bmV0dGVzID0gaW5zZXJ0R2xhc3NlRGF0YSgpOw0KLy8gICAgICAgICAgICAgZm9yZWFjaCAoJGFmZmljaGVyTHVuZXR0ZXMgYXMgJGx1bmV0dGUpIHsNCg0KLy8gICAgICAgICAgICAgICAgICAgLy8gVXRpbGlzYXRpb24gZGUgbCdpZF9nbGFzc2VzIGNvbW1lIGlkZW50aWZpYW50IHVuaXF1ZSBwb3VyIGNoYXF1ZSBjYXJ0ZSAoIHZhIMOqdHJlIHV0aWxlIHBvdXIgbGEgc3VwcHJlc3Npb24gZGUgbG9jYWxlIHN0b3JhZ2UpDQovLyAgICAgICAgICAgICAgICAgICAkaWRHbGFzc2VzID0gJGx1bmV0dGVbJ2lkX2dsYXNzZXMnXTsNCg0KDQoNCi8vICAgICAgICAgICAgICAgICAgIC8vIGVjaG8gIjxwcmU+IjsNCi8vICAgICAgICAgICAgICAgICAgIC8vIHByaW50X3IoJGx1bmV0dGUpOw0KLy8gICAgICAgICAgICAgICAgICAgLy8gZWNobyAiPC9wcmU+IjsNCg0KLy8gICAgICAgICAgICAgICAgICAgLy8gQ2VsYSBub3VzIGRvbm5lIDoNCi8vICAgICAgICAgICAgICAgICAgIC8vICgNCi8vICAgICAgICAgICAgICAgICAgIC8vICAgIFtpZF9nbGFzc2VzXSA9PiAyNw0KLy8gICAgICAgICAgICAgICAgICAgLy8gICAgW2NvbG9yXSA9PiBub2lyLW9yDQovLyAgICAgICAgICAgICAgICAgICAvLyAgICBbc2hhcGVdID0+IHBhbnRvcw0KLy8gICAgICAgICAgICAgICAgICAgLy8gICAgW21hdHRlcl0gPT4gYWNpZXIgaW5veHlkYWJsZQ0KLy8gICAgICAgICAgICAgICAgICAgLy8gICAgW2ltYWdlX3BhdGhdID0+IC8uLi9hc3NldHMvaW1nL21hcnF1ZXMvQ2F6YWwvbHVuZXR0ZXMvc29sYWlyZXMvaG9tbWVzL01PRCA2ODMtY2F6YWwud2VicA0KLy8gICAgICAgICAgICAgICAgICAgLy8gICAgW2ltYWdlX25hbWVdID0+IG1vZCA2ODMNCi8vICAgICAgICAgICAgICAgICAgIC8vICAgIFtpZF9jYXRlZ29yeV0gPT4gMg0KLy8gICAgICAgICAgICAgICAgICAgLy8gICAgW2lkX2dlbmRlcl0gPT4gMQ0KLy8gICAgICAgICAgICAgICAgICAgLy8gICAgW2lkX2JyYW5kc10gPT4gMTMNCi8vICAgICAgICAgICAgICAgICAgIC8vICAgIFtpZF9pdGVtc10gPT4gMjcNCi8vICAgICAgICAgICAgICAgICAgIC8vICAgIFtuYW1lXSA9PiBtb2QgNjgzDQovLyAgICAgICAgICAgICAgICAgICAvLyAgICBbcHJpY2VdID0+IDUwMC4wMA0KLy8gICAgICAgICAgICAgICAgICAgLy8gICAgW3N0b2NrXSA9PiAxDQovLyAgICAgICAgICAgICAgICAgICAvLyAgICBbYnJhbmRdID0+IENhemFsDQovLyAgICAgICAgICAgICAgICAgICAvLyAgICBbY2F0ZWdvcnldID0+IHNvbGFpcmUNCi8vICAgICAgICAgICAgICAgICAgIC8vICAgIFtnZW5kZXJdID0+IGhvbW1lDQovLyAgICAgICAgICAgICAgICAgICAvLyApDQoNCi8vICAgICAgICAgICAgICAgICAgIGVjaG8gIjxkaXYgY2xhc3M9J2NhcmRzJyBpZD0nbHVuZXR0ZScgZGF0YS1pZD0nIiAuIGludHZhbCgkaWRHbGFzc2VzKSAuICInPiI7DQovLyAgICAgICAgICAgICAgICAgICBlY2hvICc8aW1nIHNyYz0iJyAuIGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ2ltYWdlX3BhdGgnXSkgLiAnIiBhbHQ9Ikx1bmV0dGUgZGUgbWFycXVlICcgLiBodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWydpbWFnZV9uYW1lJ10pIC4gJyIgc3R5bGU9IndpZHRoOiAxMDAlOyBoZWlnaHQ6IDE1MHB4OyIgY2xhc3M9ImltZyI+JzsNCi8vICAgICAgICAgICAgICAgICAgIGVjaG8gJzxoMz4nIC4gdWNmaXJzdChodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWyduYW1lJ10pKSAuICc8L2gzPic7DQovLyAgICAgICAgICAgICAgICAgICBlY2hvICc8cCBpZD0icHJpY2UiPlByaXg6ICcgLiBpbnR2YWwoJGx1bmV0dGVbJ3ByaWNlJ10pIC4gJyDigqw8L3A+JzsNCi8vICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPkNvdWxldXI6ICcgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ2NvbG9yJ10pKSAuICc8L3A+JzsNCi8vICAgICAgICAgICAgICAgICAgIGVjaG8gJzxwPk1hdGnDqHJlOiAnIC4gdWNmaXJzdChodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWydtYXR0ZXInXSkpIC4gJzwvcD4nOw0KLy8gICAgICAgICAgICAgICAgICAgZWNobyAnPHA+R2VucmU6ICcgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ2dlbmRlciddKSkgLiAnPC9wPic7DQovLyAgICAgICAgICAgICAgICAgICBlY2hvICc8cD5DYXTDqWdvcmllOiAnIC4gdWNmaXJzdChodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWydjYXRlZ29yeSddKSkgLiAnPC9wPic7DQovLyAgICAgICAgICAgICAgICAgICBlY2hvICc8cD5NYXJxdWU6ICcgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ2JyYW5kJ10pKSAuICc8L3A+JzsNCi8vICAgICAgICAgICAgICAgICAgIGVjaG8gJzxkaXYgY2xhc3M9ImZvb3RlckNhcmRzIj4nOw0KLy8gICAgICAgICAgICAgICAgICAgZWNobyAiPGJ1dHRvbiAgY2xhc3M9J2J1dHRvblB1c2hDYXJ0Jz5Bam91dGVyIGF1IHBhbmllcjwvaT48L2J1dHRvbj4iOw0KLy8gICAgICAgICAgICAgICAgICAgZWNobyAiPGkgY2xhc3M9J2JpIGJpLWhlYXJ0LWZpbGwnPjwvaT4iOw0KLy8gICAgICAgICAgICAgICAgICAgZWNobyAnPC9kaXY+JzsNCi8vICAgICAgICAgICAgICAgICAgIGVjaG8gIjwvZGl2PiI7DQovLyAgICAgICAgICAgICB9DQovLyAgICAgICB9DQovLyB9DQoNCmZ1bmN0aW9uIGRpc3BsYXlDYXJkcygpDQp7DQogICAgICAvLyBMaXN0ZSBkZXMgZmlsdHJlcyBwb3NzaWJsZXMgZXQgZGVzIGZvbmN0aW9ucyBhc3NvY2nDqWVzDQogICAgICAkZmlsdGVycyA9IFsNCiAgICAgICAgICAgICdicmFuZHMnID0+ICdzZWFyY2hCeUJyYW5kJywNCiAgICAgICAgICAgICdzaGFwZXMnID0+ICdzZWFyY2hCeVNoYXBlJywNCiAgICAgICAgICAgICdtYXR0ZXJzJyA9PiAnc2VhcmNoQnlNYXR0ZXInLA0KICAgICAgICAgICAgJ2dlbmRlcnMnID0+ICdzZWFyY2hCeUdlbmRlcicsDQogICAgICAgICAgICAnY29sb3JzJyA9PiAnc2VhcmNoQnlDb2xvcicNCiAgICAgIF07DQoNCiAgICAgIGZvcmVhY2ggKCRmaWx0ZXJzIGFzICRrZXkgPT4gJGZ1bmN0aW9uKSB7DQogICAgICAgICAgICBpZiAoIWVtcHR5KCRfR0VUWyRrZXldKSAmJiBpc19hcnJheSgkX0dFVFska2V5XSkpIHsNCiAgICAgICAgICAgICAgICAgICRmaWx0ZXJlZEdsYXNzZXMgPSBbXTsNCg0KICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJF9HRVRbJGtleV0gYXMgJHZhbHVlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkZmlsdGVyZWRHbGFzc2VzID0gYXJyYXlfbWVyZ2UoJGZpbHRlcmVkR2xhc3NlcywgJGZ1bmN0aW9uKCR2YWx1ZSkpOw0KICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICBkaXNwbGF5R2xhc3NlcygkZmlsdGVyZWRHbGFzc2VzKTsNCiAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gU3RvcHBlciBsJ2V4w6ljdXRpb24gYXByw6hzIGF2b2lyIGFmZmljaMOpIGxlcyBsdW5ldHRlcyBmaWx0csOpZXMNCiAgICAgICAgICAgIH0NCiAgICAgIH0NCg0KICAgICAgLy8gU2kgYXVjdW4gZmlsdHJlIG4nZXN0IGFwcGxpcXXDqSwgYWZmaWNoZXIgdG91dGVzIGxlcyBsdW5ldHRlcw0KICAgICAgZGlzcGxheUdsYXNzZXMoaW5zZXJ0R2xhc3NlRGF0YSgpKTsNCn0NCg0KZnVuY3Rpb24gZGlzcGxheUdsYXNzZXMoJGdsYXNzZXMpDQp7DQogICAgICBmb3JlYWNoICgkZ2xhc3NlcyBhcyAkbHVuZXR0ZSkgew0KICAgICAgICAgICAgJGlkR2xhc3NlcyA9ICRsdW5ldHRlWydpZF9nbGFzc2VzJ107DQogICAgICAgICAgICBlY2hvICI8ZGl2IGNsYXNzPSdjYXJkcycgaWQ9J2x1bmV0dGUnIGRhdGEtaWQ9JyRpZEdsYXNzZXMnPiI7DQogICAgICAgICAgICBlY2hvICc8aW1nIHNyYz0iJyAuIGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ2ltYWdlX3BhdGgnXSkgLiAnIiBhbHQ9Ikx1bmV0dGUgZGUgbWFycXVlICcgLiBodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWydpbWFnZV9uYW1lJ10pIC4gJyIgc3R5bGU9IndpZHRoOiAxMDAlOyBoZWlnaHQ6IDE1MHB4OyIgY2xhc3M9ImltZyI+JzsNCiAgICAgICAgICAgIGVjaG8gJzxoMz4nIC4gdWNmaXJzdChodG1sc3BlY2lhbGNoYXJzKCRsdW5ldHRlWyduYW1lJ10pKSAuICc8L2gzPic7DQogICAgICAgICAgICBlY2hvICc8cCBpZD0icHJpY2UiPlByaXg6ICcgLiBpbnR2YWwoJGx1bmV0dGVbJ3ByaWNlJ10pIC4gJ+KCrDwvcD4nOw0KICAgICAgICAgICAgZWNobyAnPHA+Q291bGV1cjogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnY29sb3InXSkpIC4gJzwvcD4nOw0KICAgICAgICAgICAgZWNobyAnPHA+TWF0acOocmU6ICcgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ21hdHRlciddKSkgLiAnPC9wPic7DQogICAgICAgICAgICBlY2hvICc8cD5HZW5yZTogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnZ2VuZGVyJ10pKSAuICc8L3A+JzsNCiAgICAgICAgICAgIGVjaG8gJzxwPkNhdMOpZ29yaWU6ICcgLiB1Y2ZpcnN0KGh0bWxzcGVjaWFsY2hhcnMoJGx1bmV0dGVbJ2NhdGVnb3J5J10pKSAuICc8L3A+JzsNCiAgICAgICAgICAgIGVjaG8gJzxwPk1hcnF1ZTogJyAuIHVjZmlyc3QoaHRtbHNwZWNpYWxjaGFycygkbHVuZXR0ZVsnYnJhbmQnXSkpIC4gJzwvcD4nOw0KICAgICAgICAgICAgZWNobyAnPGRpdiBjbGFzcz0iZm9vdGVyQ2FyZHMiPic7DQogICAgICAgICAgICBlY2hvICI8YnV0dG9uIGNsYXNzPSdidXR0b25QdXNoQ2FydCc+QWpvdXRlciBhdSBwYW5pZXI8L2J1dHRvbj4iOw0KICAgICAgICAgICAgZWNobyAiPGkgY2xhc3M9J2JpIGJpLWhlYXJ0LWZpbGwnPjwvaT4iOw0KICAgICAgICAgICAgZWNobyAnPC9kaXY+JzsNCiAgICAgICAgICAgIGVjaG8gIjwvZGl2PiI7DQogICAgICB9DQp9DQovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vDQovLy8vLy8vLy8vLyAgcmVxdWV0ZXMgc3FsIHBvdXIgYWZmaWNoZXIgdG91dGVzIGxlcyBtYXJxdWVzICAgIC8vLy8vLy8vLy8vDQovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vDQoNCi8vIFLDqWN1cGVyZXIgbGVzIGRpZmYgbWFycXVlcw0KZnVuY3Rpb24gZGlzcGxheUJyYW5kKCkNCnsNCiAgICAgICRwZG8gPSBnZXRjb25uZXhpb24oKTsNCiAgICAgICRzcWwgPSAiU0VMRUNUIGBicmFuZGAgRlJPTSBga2doZHNpX2JyYW5kc2A7IjsNCiAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgkc3FsKTsNCiAgICAgICRzdG10LT5leGVjdXRlKCk7DQogICAgICAkYnJhbmRzID0gJHN0bXQtPmZldGNoQWxsKFBETzo6RkVUQ0hfQVNTT0MpOw0KICAgICAgcmV0dXJuICRicmFuZHM7DQp9DQoNCg0KDQovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vDQovLy8vLy8vLy8vLyByZXF1ZXRlcyBzcWwgcG91ciBham91dGVyIGRlcyBsdW5uZXR0ZXMgw6AgbGEgQkREICAvLy8vLy8vLy8vLw0KLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLw0KDQovL2ZvbmN0aW9uIGfDqW7DqXJhbGUgcXVpIHByZW5kIGVuIHBhcmFtw6h0cmVzIGxhIHRhYmxlIHPDqWxlY3Rpb25uw6kgbGUgbmJyIGV0IGxlIG5vbSBkZXMgY29sb25uZXMgYWluc2kgcXVlIGxlIG5vbSBkZXMgdmFsZXVycw0KZnVuY3Rpb24gaW5zZXJ0RGF0YSgkdGFibGUsICRjb2x1bW5zLCAkdmFsdWVzKQ0Kew0KICAgICAgLy8gQ29ubmV4aW9uIMOgIGxhIGJhc2UgZGUgZG9ubsOpZXMNCiAgICAgICRwZG8gPSBnZXRDb25uZXhpb24oKTsNCg0KICAgICAgLy8gQ29uc3RydWN0aW9uIGRlIGxhIHJlcXXDqnRlIFNRTCBkeW5hbWlxdWUgZW4gZm9uY3Rpb24gZGUgbGEgdGFibGUsIGRlcyBjb2xvbm5lcyBldCBkZXMgdmFsZXVycw0KICAgICAgJGNvbHVtblN0ciA9IGltcGxvZGUoIiwgIiwgJGNvbHVtbnMpOw0KICAgICAgJHZhbHVlU3RyID0gIjoiIC4gaW1wbG9kZSgiLCA6IiwgJGNvbHVtbnMpOw0KDQogICAgICB0cnkgew0KICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJJTlNFUlQgSU5UTyAkdGFibGUgKCRjb2x1bW5TdHIpIFZBTFVFUyAoJHZhbHVlU3RyKSIpOw0KDQogICAgICAgICAgICAvLyBMaWVyIGxlcyBwYXJhbcOodHJlcyBkeW5hbWlxdWVtZW50DQogICAgICAgICAgICBmb3JlYWNoICgkY29sdW1ucyBhcyAkaW5kZXggPT4gJGNvbHVtbikgew0KICAgICAgICAgICAgICAgICAgJHN0bXQtPmJpbmRQYXJhbSgiOiRjb2x1bW4iLCAkdmFsdWVzWyRpbmRleF0sIFBETzo6UEFSQU1fU1RSKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJHN0bXQtPmV4ZWN1dGUoKTsNCg0KICAgICAgICAgICAgLy8gUmV0b3VybmVyIGwnSUQgZHUgZGVybmllciDDqWzDqW1lbnQgaW5zw6lyw6kgc2kgbsOpY2Vzc2FpcmUNCiAgICAgICAgICAgIHJldHVybiAkcGRvLT5sYXN0SW5zZXJ0SWQoKTsNCiAgICAgIH0gY2F0Y2ggKFBET0V4Y2VwdGlvbiAkZSkgew0KICAgICAgICAgICAgZWNobyAi4pqg77iPIEVycmV1ciBpbnNlcnRpb24gZGFucyBsYSB0YWJsZSAkdGFibGUgU1FMIDogIiAuICRlLT5nZXRNZXNzYWdlKCk7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICB9DQp9DQpmdW5jdGlvbiBhZGRJdGVtKCRuYW1lLCAkcHJpY2UsICRzdG9jaykNCnsNCiAgICAgIC8vIETDqWZpbmlyIGxlcyBjb2xvbm5lcyBldCBsZXMgdmFsZXVycyDDoCBpbnPDqXJlcg0KICAgICAgJGNvbHVtbnMgPSBbJ25hbWUnLCAncHJpY2UnLCAnc3RvY2snXTsNCiAgICAgICR2YWx1ZXMgPSBbJG5hbWUsICRwcmljZSwgJHN0b2NrXTsNCg0KICAgICAgLy8gQXBwZWxlciBsYSBmb25jdGlvbiBnw6luw6lyaXF1ZSBkJ2luc2VydGlvbg0KICAgICAgcmV0dXJuIGluc2VydERhdGEoJ2tnaGRzaV9pdGVtcycsICRjb2x1bW5zLCAkdmFsdWVzKTsNCn0NCg0KDQovL2ltcGxlbnRlciB1bmUgcGFpcmUgZGUgbHVuZXR0ZSANCg0KZnVuY3Rpb24gYWRkR2xhc3NlcygkY29sb3IsICRtYXR0ZXIsICRzaGFwZSwgJGltYWdlX3BhdGgsICRpbWFnZV9uYW1lLCAkaWRfY2F0ZWdvcnksICRpZF9nZW5kZXIsICRpZF9icmFuZHMsICRpZF9pdGVtcykNCnsNCiAgICAgIC8vIETDqWZpbmlyIGxlcyBjb2xvbm5lcyBldCBsZXMgdmFsZXVycyDDoCBpbnPDqXJlcg0KICAgICAgJGNvbHVtbnMgPSBbJ2NvbG9yJywgJ21hdHRlcicsICdzaGFwZScsICdpbWFnZV9wYXRoJywgJ2ltYWdlX25hbWUnLCAnaWRfY2F0ZWdvcnknLCAnaWRfZ2VuZGVyJywgJ2lkX2JyYW5kcycsICdpZF9pdGVtcyddOw0KICAgICAgJHZhbHVlcyA9IFskY29sb3IsICRtYXR0ZXIsICRzaGFwZSwgJGltYWdlX3BhdGgsICRpbWFnZV9uYW1lLCAkaWRfY2F0ZWdvcnksICRpZF9nZW5kZXIsICRpZF9icmFuZHMsICRpZF9pdGVtc107DQoNCiAgICAgIC8vIEFwcGVsZXIgbGEgZm9uY3Rpb24gZ8OpbsOpcmlxdWUgZCdpbnNlcnRpb24NCiAgICAgIHJldHVybiBpbnNlcnREYXRhKCdrZ2hkc2lfZ2xhc3NlcycsICRjb2x1bW5zLCAkdmFsdWVzKTsNCn0NCg0KDQovLyBmdW5jdGlvbiBhZGRJdGVtcygkbmFtZSwgJHByaWNlLCAkc3RvY2spDQovLyB7DQovLyAgICAgICAkcGRvID0gZ2V0Q29ubmV4aW9uKCk7DQovLyAgICAgICB0cnkgew0KDQovLyAgICAgICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIklOU0VSVCBJTlRPIGtnaGRzaV9pdGVtcyAobmFtZSxwcmljZSxzdG9jaykgVkFMVUVTICg6bmFtZSw6cHJpY2UsOnN0b2NrKSIpOw0KLy8gICAgICAgICAgICAgJHN0bXQtPmJpbmRQYXJhbSgnOm5hbWUnLCAkbmFtZSwgUERPOjpQQVJBTV9TVFIpOw0KLy8gICAgICAgICAgICAgJHN0bXQtPmJpbmRQYXJhbSgnOnByaWNlJywgJHByaWNlLCBQRE86OlBBUkFNX0lOVCk7DQovLyAgICAgICAgICAgICAkc3RtdC0+YmluZFBhcmFtKCc6c3RvY2snLCAkc3RvY2ssIFBETzo6UEFSQU1fSU5UKTsNCi8vICAgICAgICAgICAgICRzdG10LT5leGVjdXRlKCk7DQovLyAgICAgICAgICAgICByZXR1cm4gJHBkby0+bGFzdEluc2VydElkKCk7DQovLyAgICAgICAgICAgICBlY2hvICJEb25uw6llcyBJVEVNUyBpbnPDqXLDqWVzIGF2ZWMgc3VjY8OocyI7DQovLyAgICAgICB9IGNhdGNoIChQRE9FeGNlcHRpb24gJGUpIHsNCi8vICAgICAgICAgICAgIC8vICRfU0VTU0lPTlsnZXJyb3InXSA9ICLimqDvuI8gRXJyZXVyIGluc2VydGlvbiBpdGVtcyBTUUwgOiAiIC4gJGUtPmdldE1lc3NhZ2UoKTsNCi8vICAgICAgICAgICAgIGVjaG8gIuKaoO+4jyBFcnJldXIgaW5zZXJ0aW9uIGl0ZW1zIFNRTCA6ICIgLiAkZS0+Z2V0TWVzc2FnZSgpOw0KLy8gICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KLy8gICAgICAgfQ0KLy8gfQ0KDQovLyBmdW5jdGlvbiBhZGRHbGFzc2VzKCRjb2xvciwgJG1hdHRlciwgJHNoYXBlLCAkaW1hZ2VfcGF0aCwgJGltYWdlX25hbWUsICRpZF9jYXRlZ29yeSwgJGlkX2dlbmRlciwgJGlkX2JyYW5kcywgJGlkX2l0ZW1zKQ0KLy8gew0KLy8gICAgICAgJHBkbyA9IGdldENvbm5leGlvbigpOw0KLy8gICAgICAgdHJ5IHsNCg0KLy8gICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCINCi8vICAgICAgICAgICAgICAgICAgICAgICAgIElOU0VSVCBJTlRPIGtnaGRzaV9nbGFzc2VzIA0KLy8gICAgICAgICAgICAgICAgICAgICAgICAgKGNvbG9yLCBtYXR0ZXIsIHNoYXBlLCBpbWFnZV9wYXRoLCBpbWFnZV9uYW1lLCBpZF9jYXRlZ29yeSwgaWRfZ2VuZGVyLCBpZF9icmFuZHMsIGlkX2l0ZW1zKSANCi8vICAgICAgICAgICAgICAgICAgICAgICAgIFZBTFVFUyANCi8vICAgICAgICAgICAgICAgICAgICAgICAgICg6Y29sb3IsIDptYXR0ZXIsIDpzaGFwZSwgOmltYWdlX3BhdGgsIDppbWFnZV9uYW1lLCA6aWRfY2F0ZWdvcnksIDppZF9nZW5kZXIsIDppZF9icmFuZHMsIDppZF9pdGVtcykNCi8vICIpOw0KLy8gICAgICAgICAgICAgJHN0bXQtPmJpbmRQYXJhbSgnOmNvbG9yJywgJGNvbG9yLCBQRE86OlBBUkFNX1NUUik7DQovLyAgICAgICAgICAgICAkc3RtdC0+YmluZFBhcmFtKCc6bWF0dGVyJywgJG1hdHRlciwgUERPOjpQQVJBTV9TVFIpOw0KLy8gICAgICAgICAgICAgJHN0bXQtPmJpbmRQYXJhbSgnOnNoYXBlJywgJHNoYXBlLCBQRE86OlBBUkFNX1NUUik7DQovLyAgICAgICAgICAgICAkc3RtdC0+YmluZFBhcmFtKCc6aW1hZ2VfcGF0aCcsICRpbWFnZV9wYXRoLCBQRE86OlBBUkFNX1NUUik7DQovLyAgICAgICAgICAgICAkc3RtdC0+YmluZFBhcmFtKCc6aW1hZ2VfbmFtZScsICRpbWFnZV9uYW1lLCBQRE86OlBBUkFNX1NUUik7DQovLyAgICAgICAgICAgICAkc3RtdC0+YmluZFBhcmFtKCc6aWRfY2F0ZWdvcnknLCAkaWRfY2F0ZWdvcnksIFBETzo6UEFSQU1fSU5UKTsNCi8vICAgICAgICAgICAgICRzdG10LT5iaW5kUGFyYW0oJzppZF9nZW5kZXInLCAkaWRfZ2VuZGVyLCBQRE86OlBBUkFNX0lOVCk7DQovLyAgICAgICAgICAgICAkc3RtdC0+YmluZFBhcmFtKCc6aWRfYnJhbmRzJywgJGlkX2JyYW5kcywgUERPOjpQQVJBTV9JTlQpOw0KLy8gICAgICAgICAgICAgJHN0bXQtPmJpbmRQYXJhbSgnOmlkX2l0ZW1zJywgJGlkX2l0ZW1zLCBQRE86OlBBUkFNX0lOVCk7DQovLyAgICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZSgpOw0KLy8gICAgICAgICAgICAgZWNobyAiRG9ubsOpZXMgR0xBU1NFUyBpbnPDqXLDqWVzIGF2ZWMgc3VjY8OocyI7DQovLyAgICAgICB9IGNhdGNoIChQRE9FeGNlcHRpb24gJGUpIHsNCi8vICAgICAgICAgICAgIC8vICRfU0VTU0lPTlsnZXJyb3InXSA9ICLimqDvuI8gRXJyZXVyIGluc2VydGlvbiBnbGFzc2VzIFNRTCA6ICIgLiAkZS0+Z2V0TWVzc2FnZSgpOw0KLy8gICAgICAgICAgICAgZWNobyAi4pqg77iPIEVycmV1ciBpbnNlcnRpb24gZ2xhc3NlcyBTUUwgOiAiIC4gJGUtPmdldE1lc3NhZ2UoKTsNCi8vICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCi8vICAgICAgIH0NCi8vIH0NCg0KDQovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8NCi8vIEluc8OpcmVyIGRlcyBsdW5ldHRlcyBkYW5zIGxhIEJERCDDoCBwYXJ0aXIgZCd1biBmaWNoaWVyIEpzb24NCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLw0KDQovLyBpZiAoaXNzZXQoJF9QT1NUWydCREQnXSkpIHsNCi8vICAgICAgIGZvcmVhY2ggKCRnbGFzc2VzIGFzICRnbGFzc2UpIHsNCg0KLy8gICAgICAgICAgICAgJGJyYW5kID0gc3RydG9sb3dlcigkZ2xhc3NlWydicmFuZCddKTsNCi8vICAgICAgICAgICAgICRnZW5kZXIgPSBzdHJ0b2xvd2VyKCRnbGFzc2VbImdlbmRlciJdKTsNCi8vICAgICAgICAgICAgICRjYXRlZ29yeSA9IHN0cnRvbG93ZXIoJGdsYXNzZVsiY2F0ZWdvcnkiXSk7DQovLyAgICAgICAgICAgICAkbmFtZSA9ICBzdHJ0b2xvd2VyKCRnbGFzc2VbJ25hbWUnXSk7DQovLyAgICAgICAgICAgICAkcHJpY2UgPSAkZ2xhc3NlWydwcmljZSddOw0KLy8gICAgICAgICAgICAgJGNvbG9yID0gc3RydG9sb3dlcigkZ2xhc3NlWydjb2xvciddKTsNCi8vICAgICAgICAgICAgICRtYXR0ZXIgPSBzdHJ0b2xvd2VyKCRnbGFzc2VbJ21hdHRlciddKTsNCi8vICAgICAgICAgICAgICRzaGFwZSA9IHN0cnRvbG93ZXIoJGdsYXNzZVsnc2hhcGUnXSk7DQovLyAgICAgICAgICAgICAkc3RvY2sgPSAkZ2xhc3NlWydzdG9jayddOw0KLy8gICAgICAgICAgICAgJGltYWdlX25hbWUgPSBzdHJ0b2xvd2VyKCRnbGFzc2VbJ2ltYWdlX25hbWUnXSk7DQovLyAgICAgICAgICAgICAkaW1hZ2VfcGF0aCA9ICRnbGFzc2VbJ2ltYWdlX3BhdGgnXTsNCg0KLy8gICAgICAgICAgICAgLy8gYXR0cmlidWVyIHVuZSBjYXTDqWdvcmllIMOgIHVuIGlkIA0KLy8gICAgICAgICAgICAgaWYgKCRjYXRlZ29yeSA9PSAnb3B0aXF1ZScpIHsNCi8vICAgICAgICAgICAgICAgICAgICRpZF9jYXRlZ29yeSA9IDE7DQovLyAgICAgICAgICAgICB9IGVsc2Ugew0KLy8gICAgICAgICAgICAgICAgICAgJGlkX2NhdGVnb3J5ID0gMjsNCi8vICAgICAgICAgICAgIH0NCg0KLy8gICAgICAgICAgICAgLy8gYXR0cmlidWVyIHVuIGdlbnJlIMOgIHVuIGlkIA0KDQovLyAgICAgICAgICAgICBpZiAoJGdlbmRlciA9PSAnaG9tbWUnKSB7DQovLyAgICAgICAgICAgICAgICAgICAkaWRfZ2VuZGVyID0gMTsNCi8vICAgICAgICAgICAgIH0gZWxzZWlmICgkZ2VuZGVyID09ICdmZW1tZScpIHsNCi8vICAgICAgICAgICAgICAgICAgICRpZF9nZW5kZXIgPSAyOw0KLy8gICAgICAgICAgICAgfSBlbHNlaWYgKCRnZW5kZXIgPT0gJ2VuZmFudCcpIHsNCi8vICAgICAgICAgICAgICAgICAgICRpZF9nZW5kZXIgPSAzOw0KLy8gICAgICAgICAgICAgfSBlbHNlaWYgKCRnZW5kZXIgPT0gJ21peHRlJykgew0KLy8gICAgICAgICAgICAgICAgICAgJGlkX2dlbmRlciA9IDQ7DQovLyAgICAgICAgICAgICB9DQoNCi8vICAgICAgICAgICAgIC8vIGF0dHJpYnVlciB1bmUgbWFycXVlIMOgIHVuIGlkIA0KDQovLyAgICAgICAgICAgICBpZiAoJGJyYW5kID09ICdicmV0dCcpIHsNCi8vICAgICAgICAgICAgICAgICAgICRpZF9icmFuZHMgPSAxOw0KLy8gICAgICAgICAgICAgfSBlbHNlaWYgKCRicmFuZCA9PSAncGFwcmlrYScpIHsNCi8vICAgICAgICAgICAgICAgICAgICRpZF9icmFuZHMgPSAyOw0KLy8gICAgICAgICAgICAgfSBlbHNlaWYgKCRicmFuZCA9PSAnY2zDqW1lbmNlICYgTWFyZ2F1eCcpIHsNCi8vICAgICAgICAgICAgICAgICAgICRpZF9icmFuZHMgPSAzOw0KLy8gICAgICAgICAgICAgfSBlbHNlaWYgKCRicmFuZCA9PSAnbWluYW1vdG8nKSB7DQovLyAgICAgICAgICAgICAgICAgICAkaWRfYnJhbmRzID0gNDsNCi8vICAgICAgICAgICAgIH0gZWxzZWlmICgkYnJhbmQgPT0gJ2JhbGknKSB7DQovLyAgICAgICAgICAgICAgICAgICAkaWRfYnJhbmRzID0gNTsNCi8vICAgICAgICAgICAgIH0gZWxzZWlmICgkYnJhbmQgPT0gJ2RlbWV0eicpIHsNCi8vICAgICAgICAgICAgICAgICAgICRpZF9icmFuZHMgPSA2Ow0KLy8gICAgICAgICAgICAgfSBlbHNlaWYgKCRicmFuZCA9PSAnYW5keSBCcm9vaycpIHsNCi8vICAgICAgICAgICAgICAgICAgICRpZF9icmFuZHMgPSA3Ow0KLy8gICAgICAgICAgICAgfSBlbHNlaWYgKCRicmFuZCA9PSAnZnJpZW5kbHkgRnJlbmNoeScpIHsNCi8vICAgICAgICAgICAgICAgICAgICRpZF9icmFuZHMgPSA4Ow0KLy8gICAgICAgICAgICAgfSBlbHNlaWYgKCRicmFuZCA9PSAnd29vZHlzJykgew0KLy8gICAgICAgICAgICAgICAgICAgJGlkX2JyYW5kcyA9IDk7DQovLyAgICAgICAgICAgICB9IGVsc2VpZiAoJGJyYW5kID09ICdsYSBicmlxdWUgZXQgbGEgdmlvbGV0dGUnKSB7DQovLyAgICAgICAgICAgICAgICAgICAkaWRfYnJhbmRzID0gMTA7DQovLyAgICAgICAgICAgICB9IGVsc2VpZiAoJGJyYW5kID09ICdzdW5kYXkgc29tZXdoZXJlJykgew0KLy8gICAgICAgICAgICAgICAgICAgJGlkX2JyYW5kcyA9IDExOw0KLy8gICAgICAgICAgICAgfSBlbHNlaWYgKCRicmFuZCA9PSAnbWFsdCcpIHsNCi8vICAgICAgICAgICAgICAgICAgICRpZF9icmFuZHMgPSAxMjsNCi8vICAgICAgICAgICAgIH0gZWxzZWlmICgkYnJhbmQgPT0gJ2NhemFsJykgew0KLy8gICAgICAgICAgICAgICAgICAgJGlkX2JyYW5kcyA9IDEzOw0KLy8gICAgICAgICAgICAgfSBlbHNlaWYgKCRicmFuZCA9PSAnYXBvbmVtJykgew0KLy8gICAgICAgICAgICAgICAgICAgJGlkX2JyYW5kcyA9IDE0Ow0KLy8gICAgICAgICAgICAgfQ0KDQoNCg0KLy8gICAgICAgICAgICAgLy8gJGlkX2l0ZW1zID0gYWRkSXRlbXMoJG5hbWUsICRwcmljZSwgJHN0b2NrKTsNCi8vICAgICAgICAgICAgICRpZF9pdGVtcyA9IGFkZEl0ZW0oJG5hbWUsICRwcmljZSwgJHN0b2NrKTsNCi8vICAgICAgICAgICAgIGFkZEdsYXNzZXMoJGNvbG9yLCAkbWF0dGVyLCAkc2hhcGUsICRpbWFnZV9wYXRoLCAkaW1hZ2VfbmFtZSwgJGlkX2NhdGVnb3J5LCAkaWRfZ2VuZGVyLCAkaWRfYnJhbmRzLCAkaWRfaXRlbXMpOw0KLy8gICAgICAgfQ0KLy8gfSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";