1745999999
8a0c4faa9771445189035ca844487507-phpdoc%3Ae4463a798a434c45eeff26b8ceb7fa8e-1595e69fd186416a68f5de2ec64f1b5a
s:34660:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:39:" phpDocumentor\Reflection\Php\File name";s:10:"brands.php";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"1595e69fd186416a68f5de2ec64f1b5a";s:39:" phpDocumentor\Reflection\Php\File path";s:16:"views/brands.php";s:41:" phpDocumentor\Reflection\Php\File source";s:25100:"<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>La lunetterie Senlisienne</title>
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link
    href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400..700&family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&display=swap"
    rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <link rel="stylesheet" href="/assets/css/headerFooter.css" />
  <link rel="stylesheet" href="/assets/css/brands.css" />
</head>

<body>
  <?php include __DIR__ . '/../templates/header.php' ?>
  <!-------------------------mise en plas des "cadre" photos + speech-------------------->
  <main>
    <div class="container_brands">

      <!-- <div class="container_cards-post-it">
        <div class="container_cards-scotch"></div>
        <div class="img">
          <img src="/assets/img/ic-berlin-photo-speech.jpg" alt="ic_berlin" />
        </div>
        <div class="speech">
          <h3>Ic BERLIN</h3>
          <ol>
            <li><b>Charnières Sans Vis Innovantes :</b> Un design unique breveté qui élimine les vis pour offrir des montures durables,
              flexibles et faciles à réparer.
            </li>
            <li><b>Matériaux Haut de Gamme :</b> Utilisation d'acier inoxydable, de titane et d'acétate ultraléger, garantissant
              un confort exceptionnel et une grande robustesse.</li>
            <li><b>Design Minimaliste et Moderne :</b> Des montures épurées et élégantes qui combinent style
              contemporain et fonctionnalité.</li>
            <li><b>Personnalisation :</b> Une large gamme de couleurs, formes et finitions permettant aux clients de trouver
              une paire adaptée à leur style individuel.</li>
            <li><b>Fabrication Allemande :</b> Un savoir-faire artisanal de qualité, fabriqué à Berlin, qui reflète précision,
              innovation et excellence.</li>
          </ol>
        </div>
      </div> -->

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/Woodyz/plv/WOODYS_ANIMA_JUNEE.jpg" alt="WOODYS" />
        </div>

        <div class="toggle-btn">
          <h3>WOODYS</h3> <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><b>Matériaux écologiques :</b> Woody's Eyewear se distingue par l'utilisation de matériaux durables et respectueux de l'environnement, notamment le bois, l'acétate et d'autres matériaux recyclés. Cela reflète un engagement fort en faveur de la planète, avec des lunettes fabriquées à partir de ressources renouvelables.</li>
            <li><b>Design unique et moderne :</b> La marque propose des lunettes au design innovant et esthétique, souvent caractérisées par des montures en bois ou combinées avec d'autres matériaux comme l'acier inoxydable. Chaque modèle est conçu pour être à la fois fonctionnel et stylé, avec une touche d'originalité.</li>
            <li><b>Confort et légèreté </b> Les lunettes de Woody's Eyewear sont connues pour leur confort, grâce à la légèreté des matériaux utilisés, en particulier le bois, qui permet de créer des montures agréables à porter, même sur de longues périodes.</li>
            <li><b>Personnalisation :</b>Woody's Eyewear offre souvent des options de personnalisation de ses lunettes, permettant aux clients de choisir les matériaux, les couleurs ou même d'ajouter des gravures. Cela crée un produit unique et adapté aux goûts de chacun.</li>
            <li><b>Durabilité et longévité :</b>Les produits de Woody's Eyewear sont conçus pour être robustes et durer dans le temps, offrant une qualité supérieure et un bon rapport qualité-prix. Les lunettes sont fabriquées pour résister à l'usure tout en conservant leur esthétique et fonctionnalité.</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/brett/plv/plv-brett-solaire-homme-marron-monosourcil-juillet2024.jpg" alt="Brett" />
        </div>

        <div class="toggle-btn">
          <h3>BRETT</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><b>Design Masculin et Audacieux : </b>Des montures aux lignes affirmées, spécialement conçues pour sublimer le style masculin.</li>
            <li><b>Matériaux Premium :</b>Utilisation de matériaux nobles comme l'acétate, le métal et le titane, garantissant confort, robustesse et durabilité.</li>
            <li><b>Confort et Ergonomie :</b>Des lunettes légères et parfaitement ajustées pour un usage quotidien prolongé.</li>
            <li><b>Style Polyvalent :</b>Une collection variée, adaptée aussi bien aux environnements professionnels qu'aux moments décontractés.
            </li>
            <li><b>Qualité Française :</b>Une marque ancrée dans l’élégance française, mêlant savoir-faire artisanal et modernité.s</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/Sunday-Somewhere/plv/Sunday-somewhere-Asteria_Crice.webp" alt="SUNDAY SOMEWHERE" />
        </div>

        <div class="toggle-btn">
          <h3>SUNDAY SOMEWHERE</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><strong>Origine australienne</strong> : Fondée en 2010, Sunday Somewhere est une marque australienne qui s'inspire des années 70, des voyages et des cultures du monde pour créer des lunettes au design unique.</li>
            <li><strong>Design intemporel</strong> : Les collections de la marque revisitent les montures rétro avec style, proposant des lunettes de soleil et de vue aux formes arrondies et aux couleurs inspirées des paysages de l'hémisphère sud.</li>
            <li><strong>Fabrication artisanale</strong> : Les lunettes Sunday Somewhere sont fabriquées à la main selon des normes de qualité élevées, avec une attention particulière portée aux détails et aux finitions.</li>
            <li><strong>Adoptée par les célébrités</strong> : La marque a conquis le cœur de nombreuses célébrités internationales telles que Beyoncé, Rihanna, Kendall Jenner et Gigi Hadid, qui apprécient ses designs tendance et originaux.</li>
            <li><strong>Présence mondiale</strong> : Sunday Somewhere est disponible dans plus de 600 magasins répartis dans 30 pays à travers le monde, reflétant son succès et son attrait international.</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/brique-et-violette/plv/brique-et-violette-plv.jpg" alt="LA BRIQUE ET LA VIOLETTE" />
        </div>
        <div class="toggle-btn">
          <h3>LA BRIQUE ET LA VIOLETTE</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><b>Design créatif et élégant :</b>La Brique et la Violette Eyewear est reconnue pour ses montures au design unique et raffiné. Les lunettes de la marque se distinguent par des formes modernes et des lignes épurées, alliant élégance et originalité, pour un look à la fois sophistiqué et tendance.</li>
            <li><b>Utilisation de matériaux de qualité :</b>La marque privilégie des matériaux haut de gamme pour la fabrication de ses lunettes, comme des acétates de qualité, mais aussi des métaux légers et résistants. Cela garantit non seulement un confort optimal, mais aussi une durabilité à long terme.</li>
            <li><b>Personnalisation et choix variés :</b>La Brique et la Violette Eyewear propose une large gamme de modèles, avec différentes couleurs, formes et tailles. Cela permet à chaque client de trouver une paire de lunettes qui lui correspond parfaitement, tout en offrant des options de personnalisation pour répondre aux besoins spécifiques de chacun.</li>
            <li><b>Confort et légèreté :</b>Les lunettes de la marque sont conçues pour offrir un confort de port optimal, grâce à des matériaux légers et bien adaptés à la forme du visage. La légèreté de leurs montures assure une expérience agréable, même pour un usage prolongé.</li>
            <li><b>Fabrication artisanale et locale :</b>La Brique et la Violette Eyewear mise sur un savoir-faire artisanal, avec une production principalement réalisée en France. Ce processus de fabrication met l'accent sur la qualité et l'attention portée aux détails, ce qui fait la différence dans le produit final</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/Friendly-frenchy/plv/visuel-plv-quatro-pm-friendly-frenchy-mai-23.jpg" alt="FRIENDLY FRENCHY" />
        </div>
        <div class="toggle-btn">
          <h3>FRIENDLY FRENCHY</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><b>Esprit Made in France :</b>Une marque qui valorise le savoir-faire français, avec des montures conçues et fabriquées localement pour garantir qualité et authenticité.</li>
            <li><b>Design Coloré et Original : </b>Des lunettes aux styles modernes et audacieux, intégrant des touches de couleurs vibrantes pour une identité unique.</li>
            <li><b>Engagement Écoresponsable :</b>Utilisation de matériaux recyclés ou durables, avec une démarche respectueuse de l'environnement.</li>
            <li><b>Légèreté et Confort :</b>Des montures ergonomiques et légères, conçues pour offrir un confort optimal tout au long de la journée.</li>
            <li><b>Accessibilité :</b>Une offre qui allie qualité premium et prix abordables, rendant le design français accessible à tous.</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/Demetz/plv/demetz-plv2.JPG" alt="Demetz" />
        </div>
        <div class="toggle-btn">
          <h3>Demetz</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><b>Spécialisation dans l'optique sportive :</b> Depuis plus de 70 ans, Demetz se consacre à la conception de montures adaptées aux activités sportives, offrant des solutions avec ou sans correction pour les sportifs de tous âges.</li>
            <li><b>Large gamme de produits : </b>La marque propose une variété de lunettes de soleil pour hommes, femmes et enfants, disponibles en différentes formes et couleurs pour s'adapter à toutes les morphologies et préférences.</li>
            <li><b>Adaptabilité à la vue :</b>De nombreux modèles de lunettes de soleil Demetz peuvent être équipés de verres correcteurs, permettant aux porteurs de bénéficier d'une vision optimale lors de leurs activités en plein air.</li>
            <li><b>Collaboration avec d'autres marques :</b>Demetz a élargi son offre en intégrant des collections comme Henko, une marque proposant 214 modèles de lunettes de soleil avec verres polarisés et anti-rayures, enrichissant ainsi sa gamme de produits.</li>
            <li><b>Engagement envers la qualité et la protection :</b>Les lunettes Demetz sont conçues pour offrir une protection UV optimale, protégeant les yeux des effets néfastes du soleil tout en assurant un ajustement confortable et stable, même lors d'activités sportives intenses</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/Minamoto/plv/minamoto-plv.png" alt="Minamoto" />
        </div>
        <div class="toggle-btn">
          <h3>Minamoto</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><b>Héritage japonais :</b> Originaire de Sabae, dans la préfecture de Fukui, berceau de l'industrie lunetière japonaise, Minamoto puise son inspiration dans l'histoire et la culture du Japon.</li>
            <li><b>Artisanat traditionnel : </b>Chaque monture est conçue avec une attention méticuleuse aux détails, reflétant l'artisanat japonais d'exception. Le logo de la marque, réalisé à la main par un maître calligraphe, symbolise cette précision et ce savoir-faire.</li>
            <li><b>Matériaux de haute qualité :</b>Les lunettes Minamoto sont fabriquées exclusivement en titane japonais pur, reconnu pour sa légèreté, sa durabilité et son confort optimal.</li>
            <li><b>Design épuré et intemporel :</b>La marque propose des montures au style minimaliste, inspirées par la philosophie zen, alliant élégance et sobriété pour une esthétique intemporelle.</li>
            <li><b>Écrin artisanal : </b>Chaque paire de lunettes est accompagnée d'un étui fabriqué au Japon à partir de papier washi fait main, mettant en valeur le savoir-faire traditionnel japonais et offrant une protection élégante pour les montures</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/Paprika/plv/visuel-plv-optique-panthere-pm-paprika.jpg" alt="Paprika" />
        </div>
        <div class="toggle-btn">
          <h3>Paprika</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><strong>Design ludique et coloré :</strong> Paprika propose des montures aux couleurs vives et aux formes originales, spécialement conçues pour égayer le visage des enfants.</li>
            <li><strong>Adaptation aux personnalités affirmées :</strong> Les modèles sont pensés pour correspondre aux caractères bien trempés des plus jeunes, offrant des designs qui reflètent leur énergie et leur individualité.</li>
            <li><strong>Résistance et flexibilité :</strong> Conçues pour supporter les activités dynamiques des enfants, les montures Paprika allient robustesse et souplesse, garantissant durabilité et confort au quotidien.</li>
            <li><strong>Autonomie des enfants :</strong> Grâce à leur conception pratique, les lunettes Paprika permettent aux enfants de les manipuler facilement, favorisant ainsi leur indépendance sans nécessiter l'aide constante des parents.</li>
            <li><strong>Marque française dédiée aux enfants :</strong> Paprika est une marque française qui se consacre exclusivement à la création de lunettes pour enfants, mettant l'accent sur des designs tendance et des combinaisons de couleurs actuelles.</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/Malt/plv/plv-optique-homme-malt-2023.jpg" alt="Malt" />
        </div>
        <div class="toggle-btn">
          <h3>Malt</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><strong>Origine belge indépendante :</strong> Malt est une marque de lunettes belge et indépendante, reconnue pour son savoir-faire et son design innovant.</li>
            <li><strong>Design sobre et chic pour hommes :</strong> Spécialisée dans les montures masculines, Malt propose des lunettes aux lignes épurées et élégantes, reflétant une esthétique virile et raffinée.</li>
            <li><strong>Associations innovantes de matériaux :</strong> La marque se distingue par l'utilisation combinée de matériaux tels que l'acétate, le bois, le métal et le carbone, créant des montures uniques et durables.</li>
            <li><strong>Ergonomie et confort :</strong> Les montures Malt sont conçues pour offrir une ergonomie optimale, assurant un ajustement confortable et adapté aux besoins des porteurs.</li>
            <li><strong>Symbole distinctif :</strong> Chaque paire de lunettes arbore un épi de malt imprimé au bout de chaque branche, rendant hommage à la culture belge de la bière et ajoutant une touche d'authenticité.</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/Clémence-&-Margaux/plv/PLV-Margaux-et-Clemence.jpg" alt="Clémence & Margaux" />
        </div>
        <div class="toggle-btn">
          <h3>Clémence & Margaux</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><strong>Création par deux sœurs passionnées :</strong> Clémence et Margaux, deux jeunes sœurs, ont fondé la marque en combinant leurs talents et leur complicité pour proposer des modèles de lunettes reflétant leur esprit unique.</li>
            <li><strong>Inspirations mode et design :</strong> Les collections puisent leur inspiration dans les univers de la mode et du design, offrant des montures tendance et contemporaines adaptées aux femmes modernes.</li>
            <li><strong>Matériaux de haute qualité :</strong> Les lunettes Clémence & Margaux sont principalement réalisées en acétate, garantissant une qualité exceptionnelle et une durabilité accrue.</li>
            <li><strong>Designs frais et décalés :</strong> La marque se distingue par des montures élégantes et féminines, apportant une touche de fraîcheur et d'originalité à chaque modèle.</li>
            <li><strong>Large gamme de produits :</strong> Clémence & Margaux propose une vaste sélection de lunettes optiques et solaires, ainsi que des accessoires, répondant aux besoins et aux envies de chaque femme.</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/Cazal/plv/cazal-plv2.jpeg" alt="Cazal" />
        </div>
        <div class="toggle-btn">
          <h3>Cazal</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><strong>Un style vintage raffiné :</strong> Cazal propose des modèles aux formes élégantes et intemporelles, idéales pour ceux qui recherchent une monture avec un charme rétro.</li>
            <li><strong>Des montures oversize et marquées :</strong> La marque est connue pour ses lunettes aux formes imposantes et aux détails sophistiqués, souvent appréciées par une clientèle cherchant à affirmer son style.</li>
            <li><strong>Des matériaux de haute qualité :</strong> Les lunettes Cazal sont fabriquées en acétate premium et en métal doré ou plaqué or, garantissant durabilité et confort.</li>
            <li><strong>Un confort optimal :</strong> Les designs sont pensés pour offrir un bon maintien et un port agréable, répondant aux besoins d’un public exigeant.</li>
            <li><strong>Une touche d’excentricité assumée :</strong> Même dans ses modèles plus classiques, Cazal conserve une signature audacieuse avec des finitions luxueuses et des jeux de couleurs distinctifs.</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/Aponem/plv/lunettes-clips.jpg" alt="Aponem" />
        </div>
        <div class="toggle-btn">
          <h3>Aponem</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><strong>Design audacieux et contemporain :</strong> Äponem propose des montures aux formes géométriques et aux couleurs vives, alliant modernité et originalité pour refléter la personnalité unique de chaque porteur.</li>
            <li><strong>Matériaux de haute qualité :</strong> Les lunettes sont fabriquées à partir de matériaux premium tels que l'acétate et le métal, garantissant durabilité et confort.</li>
            <li><strong>Montures combinées avec clips solaires :</strong> Certains modèles sont conçus avec des clips solaires polarisés, offrant une solution pratique et élégante pour les porteurs de lunettes de vue.</li>
            <li><strong>Collection variée pour tous les styles :</strong> Äponem propose une gamme de montures optiques en métal, en acétate ou en combinaison, adaptées à différents styles et préférences.</li>
            <li><strong>Engagement envers l'individualité :</strong> La marque encourage les porteurs à exprimer leur caractère et leur individualité à travers des designs uniques et personnalisés.</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/Bali/plv/plv2-bali.jpeg" alt="Bali" />
        </div>
        <div class="toggle-btn">
          <h3>Bali</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><strong>Design inspiré de Bali et de Paris :</strong> Fondée par la designer Vanessa Wang, Bali Eyewear fusionne l'élégance parisienne avec l'exotisme de Bali, créant des montures uniques et raffinées.</li>
            <li><strong>Collection variée :</strong> La marque propose une gamme complète de lunettes optiques et solaires, adaptées à différents styles et besoins.</li>
            <li><strong>Matériaux de qualité :</strong> Les montures sont fabriquées à partir de matériaux premium tels que l'acétate et le métal, assurant durabilité et confort.</li>
            <li><strong>Esthétique moderne et élégante :</strong> Bali Eyewear se distingue par des designs contemporains, alliant formes géométriques et couleurs tendance pour un look chic et urbain.</li>
            <li><strong>Engagement envers la qualité :</strong> La marque met l'accent sur une qualité exceptionnelle et une protection UV essentielle, garantissant à la fois style et sécurité pour les porteurs.</li>
          </ol>
        </div>
      </div>

      <div class="container_card">
        <div class="img">
          <img src="/assets/img/marques/Andy-brook/plv/plv-andy-brook.jpg" alt="Andy brook" />
        </div>
        <div class="toggle-btn">
          <h3>Andy brook</h3>
          <i class="bi bi-caret-down"></i>
        </div>
        <div class="speech">
          <ol>
            <li><strong>Design moderne et tendance :</strong> Andy Brook propose des montures au style contemporain, alliant finesse et originalité, adaptées aux goûts actuels.</li>
            <li><strong>Matériaux de qualité :</strong> Les lunettes sont fabriquées à partir de matériaux premium tels que l'acétate et le métal, garantissant durabilité et confort.</li>
            <li><strong>Accessibilité :</strong> La marque offre des produits de qualité à des prix compétitifs, permettant à un large public d'accéder à des lunettes stylées sans dépasser leur budget.</li>
            <li><strong>Présence étendue :</strong> Andy Brook est disponible dans plus de 1 500 opticiens réputés en France, facilitant l'accès à ses collections haut de gamme.</li>
            <li><strong>Engagement envers l'artisanat :</strong> Les montures sont conçues et fabriquées à la main avec soin et perfection, offrant une expérience unique aux porteurs.</li>
          </ol>
        </div>
      </div>

    </div>
  </main>
  <?php include __DIR__ . '/../templates/footer.php' ?>
  <script defer>
    let container_cards = document.querySelectorAll(".container_card");
    let buttons = document.querySelectorAll(".toggle-btn");

    buttons.forEach((button, index) => {
      let container_card = container_cards[index]; // Associe le bon container au bouton

      button.addEventListener("click", () => {
        container_card.classList.toggle("expanded");
        button.classList.toggle("active");

        // Défilement vers le container card pour afficher la définition s'il est déplié défiler jusqu'à la fin...smooth=défilement lent
        setTimeout(() => {
          container_card.scrollIntoView({
            behavior: 'smooth',
            block: container_card.classList.contains("expanded") ? 'end' : 'start'
          });
        }, 600);
      });
    });
  </script>
</body>

</html>";s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";