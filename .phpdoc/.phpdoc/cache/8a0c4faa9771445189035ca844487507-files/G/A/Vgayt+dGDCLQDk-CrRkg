1745999999
8a0c4faa9771445189035ca844487507-phpdoc%3A694e649e73659bc9a311ba13f765125f-f92cb3b33fc52f66b297c42f27ae257d
s:30404:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:39:" phpDocumentor\Reflection\Php\File name";s:11:"glasses.php";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"f92cb3b33fc52f66b297c42f27ae257d";s:39:" phpDocumentor\Reflection\Php\File path";s:17:"views/glasses.php";s:41:" phpDocumentor\Reflection\Php\File source";s:21904:"<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Guide pratique lunette</title>
  <meta name="description" content="Découvrez un guide complet sur les verres correcteurs, leurs traitements et les solutions adaptées à votre vision. Myopie, presbytie, astigmatisme : trouvez les meilleures options !">
  <meta name="keywords" content="lunettes, verres correcteurs, myopie, presbytie, astigmatisme, traitement anti-rayures, filtres anti-lumière bleue">
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Dancing+Script:wght@400..700&family=Domine:wght@400..700&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Roboto:ital,wght@0,100..900;1,100..900&family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&display=swap" rel="stylesheet">
  <link
    href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400..700&family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&display=swap"
    rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <link rel="stylesheet" href="/assets/css/headerFooter.css" />
  <link rel="stylesheet" href="/assets/css/glasses.css" />
</head>

<body>

  <?php include __DIR__ . '/../templates/header.php' ?>

  <div class="navigateIcon">
    <i class="bi bi-book" id="book"></i>
    <a href="#Haut de pages"><i class="bi bi-arrow-bar-up"></i></a>
  </div>
  <div class="sideNav" id="sideNav">

    <div class="searchOnPage">
      <a href="#Verres" class="linkMenu">
        <h5>Verres</h5>
      </a>
      <a href="#Verres unifocaux" class="linkMenu">
        <h6>Unifocaux</h6>
      </a>
      <a href="#Verres Progressifs" class="linkMenu">
        <h6>Progressifs</h6>
      </a>
      <a href="#Verres Dégressifs" class="linkMenu">
        <h6>Dégressifs</h6>
      </a>
    </div>
    <div class="searchOnPage">
      <a href="#Traitements" class="linkMenu">
        <h5>Traitements</h5>
      </a>
      <a href="#Traitement anti-rayures" class="linkMenu">
        <h6>Anti-rayures</h6>
      </a>
      <a href="#Traitement anti-reflets" class="linkMenu">
        <h6>Anti-reflets</h6>
      </a>
      <a href="#Filtres anti-lumière bleue" class="linkMenu">
        <h6>Anti lumière bleu</h6>
      </a>
      <a href="#Verres solaires" class="linkMenu">
        <h6>Solaires
        </h6>
      </a>
    </div>
    <div class="searchOnPage">
      <a href="#amétropies" class="linkMenu">
        <h5>Amétropie</h5>
      </a>
      <a href="#HYPERMÉTROPE" class="linkMenu">
        <h6>Hypermétropie</h6>
      </a>
      <a href="#ASTIGMATE" class="linkMenu">
        <h6>Astigmatisme</h6>
      </a>
      <a href="#PRESBYTE" class="linkMenu">
        <h6>Presbytie</h6>
      </a>
      <a href="#MYOPE" class="linkMenu">
        <h6>Myopie</h6>
      </a>
    </div>
  </div>
  <div class="overlay" id="overlay"></div>
  <main>
    <div class="main">
      <div class="prescription" id="Haut de pages">
        <h2>Explication d'une ordonnance</h2>
        <div class="prescriptionImg">
          <img src="/assets/img/explication-ordonnace.jpg" alt="prescription/ordonnance de verre correcteurs">
        </div>
        <ul>
          <li>Œil Droit (OD) / Œil Gauche (OG)</li>
          <li>Le signe « + » indique que vous êtes hypermétrope. Un signe « - » indiquerait que vous êtes myope.
            Les chiffres expriment le degré de myopie ou d’hypermétropie : plus le chiffre est élevé, plus
            la correction optique est forte</li>
          <li>Une valeur entre parenthèses indique la présence d’un astigmatisme.
            Exemples : (-1,50)90° ou (+ 0,75)0°…Les chiffres entre parenthèses définissent
            la valeur de l’astigmatisme.Les degrés précisent l’orientation de cet astigmatisme</li>
          <li>Puissance de près qu’il faut additionner à la vision de loin pour voir net à 33 cm : lire, écrire…
            Cette annotation est spécifique aux ordonnances pour la presbytie, c'est-à-dire pour les sujets
            de plus de 45 ans, environ.La valeur varie entre +0,75 pour le début de la presbytie à +3,00. Plus rarement + 3,25
            ou +3,50 en cas de déficience visuelle.</li>
        </ul>
      </div>

      <h2 id="Verres">Quel matériau choisir pour les verres de lunettes ?</h2>

      <h3>Verres minéraux (à base de verre naturel)</h3>

      <p>
        Ils ont longtemps été les plus répandus, mais leur usage est désormais
        plus confidentiel. Aujourd'hui, Ils sont essentiellement recommandés
        pour certains cas particuliers, comme les fortes amétropies.
      </p>

      <h4>Propriétés :</h4>
      <ul>
        <li>
          Indices de réfraction élevés (pour une même correction, plus
          l’indice de réfraction est élevé, plus le verre sera fin)
        </li>
        <li>
          Surface dure, qui induit une bonne résistance aux rayures mais rend
          le matériau fragile, avec un risque de casse
        </li>
        <li>Poids supérieur aux verres organiques</li>
      </ul>

      <h3>Verres organiques (à base de matériaux synthétiques)</h3>

      <p><strong>C’est actuellement la matière la plus utilisée</strong></p>

      <h4>Propriétés :</h4>
      <ul>
        <li>Indices de réfraction moins élevés que les verres minéraux</li>
        <li>Grande résistance aux chocs (ils sont quasiment incassables)</li>
        <li>
          Surface plus tendre, qui entraîne une plus grande susceptibilité aux
          rayures. Cela peut être amélioré avec des traitements spécifiques
        </li>
        <li>Plus légers que les verres minéraux</li>
        <li>Compatibles avec l’ensemble des montures</li>
      </ul>
      <h3>Verres en polycarbonate</h3>
      <p>
        C’est une sous-catégorie de verres organiques. Ils sont utilisés pour
        des cas particuliers, essentiellement pour des activités sportives.
      </p>
      <h4>Propriétés :</h4>
      <ol>
        <li>Ultra-résistants, ils sont incassables</li>
        <li>Grande susceptibilité aux rayures</li>
        <li>
          Indice de réfraction unique (ils sont déconseillés en cas de forte
          amétropie, défaut d’amincissement)
        </li>
      </ol>

      <h2>Quels sont les différents types de verres correcteurs ?</h2>

      <h3 id="Verres unifocaux">Verres unifocaux (ou "simple foyer")</h3>

      <p>
        <u>
          Les verres unifocaux possèdent la même puissance de correction sur
          l’ensemble de leur surface. Ils permettent la vision nette à une
          distance précise :</u>
      </p>
      <ol>
        <li>vision de loin le plus souvent</li>
        <li>vision intermédiaire</li>
        <li>vision de près</li>
      </ol>
      <p>
        Ils peuvent corriger tout type d'amétropie
        : hypermétropie, myopie et astigmatisme.
      </p>
      <p><u>Ces verres sont :</u></p>
      <ol>
        <li>
          <strong>Sphériques</strong>, pour corriger la myopie (concâves),
          l'hypermétropie (convexes) ou la presbytie
        </li>
        <li>
          <strong>Toriques</strong>, pour corriger un astigmatisme. Il y a,
          dans ce cas, une différence de puissance entre deux rayons de
          courbures perpendiculaires entre eux
        </li>
        <li>
          <strong>Asphériques</strong>, pour les corrections très importantes.
          Ce procédé permet d'obtenir des verres à la fois plus fins et plus
          légers. La qualité de correction en est améliorée
        </li>
      </ol>
      <p>
        Le port de <strong>lunettes "loupes"</strong>, que l'on trouve en
        pharmacie ou dans les supermarchés, est possible pour soulager les
        difficultés en vision de près, à l'âge de la presbytie. Malgré tout,
        ces lunettes ne sont pas parfaitement adaptées à votre amétropie, à
        votre écart inter-pupillaire et génèrent, à long terme, un inconfort
        ou la survenue de maux de tête.
      </p>
      <h3>Verres bifocaux (verres à double-foyer)</h3>
      <p>
        Ces verres sont de moins en moins utilisés. Ils permettent une vision
        de loin et une vision de près, grâce à deux zones de correction
        séparées dans le verre. Il n’y a, par contre, pas de vision
        intermédiaire et ils sont réputés moins esthétiques que les verres
        progressifs.
      </p>
      <h3>Verres multifocaux</h3>
      <p>
        Ils sont capables de corriger plusieurs anomalies réfractives et
        permettent, ainsi, une vision nette à différentes distances. Cela est
        utile pour les patients presbytes ou les patients opérés de cataracte.
      </p>
      <h4 id="Verres Progressifs">Verres Progressifs</h4>
      <p><u>Un verre progressif se compose de 4 zones distinctes :</u></p>
      <ol>
        <li>La partie supérieure correspond à la vision de loin.</li>
        <li>
          La partie inférieure correspond à la vision de près (à 33 cm le plus
          souvent).
        </li>
        <li>
          La partie centrale correspond à la vision "mi-distance" ; c’est une
          zone de transition, avec plusieurs corrections successives
          permettant le passage progressif (d’où le nom) de la vision longue
          distance à la vision de près.
        </li>
        <li>
          Des zones d’aberrations optiques sur les bords, de part et d’autre
          du couloir de dégressivité du verre.
        </li>
      </ol>
      <div class="DMLA">
        <p> Les verres progressifs sont plutôt déconseillés chez les patients
          atteints d’une pathologie sévère de la vision centrale (comme une DMLA
          avancée) ou pour les patients ayant d'importantes difficultés de
          convergence binoculaire. Pour ce type de cas, mieux vaut, en règle
          générale, privilégier le port de deux paires de lunettes (l'une pour
          la vision de loin, l'autre pour la vision de près).
        </p>
      </div>
      <h4 id="Verres Dégressifs">Verres Dégressifs ou Mi-Distance</h4>
      <p>
        Ce sont des verres multifocaux, qui corrigent la vision de près et
        offrant une profondeur de champ suffisante pour garantir le confort en
        vision intermédiaire. Ils ne corrigent pas la vision longue distance.
      </p>
      <p>
        Ils constituent un choix intéressant pour le jeune presbyte, ou pour
        certaines activités, comme le travail sur ordinateur.
      </p>
      <p>
        Si votre choix s'oriente vers ce type de correction, votre
        ophtalmologiste et votre opticien auront besoin d'informations
        précisés sur vos activités : la distance entre vos yeux et votre
        ordinateur par exemple.
      </p>
      <h2 id="Traitements">
        Quels sont les traitements et filtres possibles pour les verres de
        lunettes ?
      </h2>
      <h3 id="Traitement anti-rayures">Traitement anti-rayures (traitement durci)</h3>
      <p>
        La plupart des verres vendus en France sont des verres organiques, qui
        sont sensibles aux rayures. Elles sont inesthétiques et altèrent la
        qualité visuelle. Il est donc nécessaire de protéger le verre, par des
        traitements de surface adéquats. La technique la plus courante
        consiste en l'application d'une résine à la surface du verre ; on
        parle de "Hard-coating". La couche de résine est extrêmement fine.
        Elle est durcie par cuisson ou par traitement ultra-violet, ce qui
        rend le verre beaucoup moins vulnérable aux altérations de sa surface.
      </p>
      <h3 id="Traitement anti-reflets">Traitement anti-reflets</h3>
      <p>
        Les filtres anti-reflets sont des traitements de surface compatibles
        avec tous les verres (qu'ils soient blancs, teintés, polarisés,
        photochromiques…). Ils permettent une vision plus précise et plus
        nette, grâce à une amélioration de la transparence du verre et à une
        diminution des reflets lumineux.
      </p>
      <p>
        D’un point de vue esthétique, ils limitent l'effet "miroir", très
        visible sur les photographies par exemple.
      </p>
      <p>
        Par contre, ces traitements sont sensibles à l'élévation de la
        température et il faut éviter de laisser vos lunettes près d’une
        source de chaleur importante.
      </p>
      <h3 id="Filtres anti-lumière bleue">Filtres anti-lumière bleue</h3>
      <p>
        Il n'existe, à l'heure actuelle, aucune preuve scientifique robuste
        concernant l'intérêt de ce type de filtre dans la protection contre la
        survenue de pathologies rétiniennes.
      </p>
      <p>
        L'exposition excessive à la lumière bleue des écrans LED semble
        impliquée dans la perturbation du rythme circadien et donc, dans la
        génèse de troubles du sommeil, en particulier chez l'enfant et
        l'adolescent.
      </p>
      <p>
        Par ailleurs, les dispositifs de filtrage de la lumière bleue ne
        peuvent, à l'heure actuelle, et d'après les données récentes de
        l'ANSES, pas être considérés comme des équipements de protection
        individuelle, par rapport à des verres ophtalmiques traités.
      </p>
      <h3 id="Verres solaires">Verres solaires</h3>
      <p>
        Les verres solaires bénéficient d'un traitement qui permet de limiter
        l’éblouissement et de filtrer les rayons ultraviolets (UV) du soleil,
        qui ont une toxicité rétinienne démontrée. Ce traitement s'ajoute, si
        nécessaire, à la correction optique du verre.
      </p>
      <p><u>Il existe cinq catégories de protection solaire :</u></p>
      <ol>
        <li>
          <strong>Catégorie 0 :</strong> ne protège pas des UV solaires.
          <br />
          Réservée au confort et à l'esthétique.
        </li>
        <li>
          <strong>Catégorie 1 </strong>: filtre 90% des rayons UV et 20-60% de
          la lumière visible. <br />
          Ces verres sont adaptés à une utilisation quotidienne, lors d’une
          luminosité solaire atténuée (hiver, nuageux), mais déconseillés pour
          de fortes expositions.
        </li>
        <li>
          <strong>Catégorie 2 :</strong> filtre >95% des UV et 60-80% de la
          lumière visible. <br />
          Ces verres sont adaptés à une luminosité solaire moyenne.
        </li>
        <li>
          <strong>Catégorie 3 :</strong> filtre > 98% des UV et 80-90 % de la
          lumière visible. <br />
          Ces verres sont adaptés à une forte luminosité solaire (été, mer,
          montagne).
        </li>
        <li>
          <strong>Catégorie 4 :</strong> filtre > 99% des UV et 90-95% de la
          lumière visible. <br />
          Ces verres sont adaptés à une luminosité solaire exceptionnelle
          (glaciers en été, alpinisme). Par contre, la conduite automobile est
          contre-indiquée avec ce type de verre.
        </li>
      </ol>
      <h3>Verres photochromiques</h3>
      <p>
        Un verre photochromique est un verre correcteur capable de s’assombrir
        lorsqu’il est exposé à des rayonnements ultraviolets (UV). Il s’adapte
        à la forte luminosité en se teintant et revient à sa teinte d’origine
        lorsque l’exposition cesse.
      </p>
      <p>
        Ce type de verre est appréciés des patients souffrant de
        photosensibilité et sujets à l’éblouissement lors de l’exposition
        solaire
      </p>
      <h3>Verres polarisés</h3>
      <p>
        Les verres polarisés sont des verres solaires de haute performance,
        permettant une optimisation de la vision. Ils limitent les phénomènes
        d’éblouissement induits par la réverbération de la lumière sur des
        surfaces planes, comme des étendues d’eau ou de neige. Ils sont utiles
        également lors de la conduite automobile avec un soleil de face, ou
        encore lorsque la chaussée est humide. Ils sont surtout recommandés
        aux sportifs (golf, pêche, randonnée, ski…) ou pour les conducteurs
        réguliers. De manière générale, ils procurent un confort visuel
        indéniable pour tout type d'activité.
      </p>

      <h2 id="amétropies">Explication des différentes amétropies :</h2>

      <h3 id="HYPERMÉTROPE">Un oeil hypermétrope :</h3>

      <p>Dans le cas d’une hypermétropie, l’image se forme en arrière de la rétine.
        Plus l’objet observé est près, plus l’œil le voit flou (car plus il est éloigné du plan de la rétine).
        Il faut alors un verre correctif pour décaler cette image sur le plan de la rétine, et former une image nette.
        Pour un œil hypermétrope, ce sera un verre convergent (ou de puissance positive).L’hypermétropie en résumé,
        c’est lorsque la vision de près floue qui nécessite une correction optique, en particulier de près pour rendre
        la vision nette.</p>

      <h3 id="ASTIGMATE">Un oeil astigmate :</h3>

      <p>L’astigmatisme est une anomalie de courbure de la cornée ou du cristallin.
        Lorsque ces deux éléments sont sphériques (ronds comme un ballon de football), il n’y a pas d’astigmatisme.
        Mais lorsque l’un ou ces deux éléments sont toriques (ovales comme un ballon de rugby, avec un petit
        et un grand diamètre), il y a un astigmatisme. Dans le cas d’un astigmatisme, l’image se forme en avant et/ou en
        arrière de la rétine, à deux emplacements différents .Il faut alors un verre correctif pour décaler cette image sur
        le plan de la rétine, et former une image nette. Pour un œil astigmate, ce sera un verre appelé «torique».
        Ce verre possède deux puissances de corrections différentes selon deux axes perpendiculaires, correspondant à
        ceux de l’anomalie détectée.L’astigmatisme en résumé, c’est une vision imprécise à différentes distances qui
        nécessite une correction optique pour rendre la vision nette.
      </p>

      <h3 id="PRESBYTE">Un oeil presbyte :</h3>

      <p>La presbytie est une anomalie du cristallin qui survient naturellement avec l’âge, à partir de 40 ans.
        Celui-ci devient moins souple et ne parvient plus à faire la mise au point des rayons qui le traversent.
        Dans le cas d’une presbytie, l’image se forme en arrière de la rétine. Plus l’objet observé est près, plus
        l’œil le voit flou (car plus il est éloigné du plan de la rétine).Il faut alors un verre particulier pour
        corriger cette défocalisation, et ainsi former une image nette, à partir d’un objet vu à n’importe quelle distance.
        Ce verre doit tenir compte de la distance de l’objet observé, car le cristallin ne fait plus la mise au point.
        Il doit donc corriger l’image d’un objet vu à n’importe quelle distance. Pour un œil presbyte, on utilise
        alors un verre multifocal, appelé aussi verre progressif.La presbytie en résumé, c’est un trouble de la
        vision de près qui apparaît à partir de 40 ans et qui est due au vieillissement naturel de l'œil.
        La presbytie se corrige en particulier par des verres progressifs ou à double-foyers.
      </p>

      <h3 id="MYOPE">UN OEIL MYOPE :</h3>

      <p>Dans le cas d’une myopie, l’image se forme en avant de la rétine. Plus l’objet observé est loin,
        plus l’œil le voit flou (car plus il est éloigné de la rétine).Il faut alors un verre pour décaler
        cette image sur le plan de la rétine et former une image nette. Pour un œil myope, ce sera un verre
        correctif divergent (ou de puissance négative).La myopie en résumé, c’est lorsque la vision de loin
        floue qui nécessite une correction optique, en particulier de loin pour rendre la vision nette.
      </p>
    </div>
  </main>
  <?php include __DIR__ . '/../templates/footer.php' ?>
  <script>
    const burger = document.getElementById("book");
    const menu = document.getElementById("sideNav");
    const overlay = document.getElementById("overlay");
    const linkMenu = document.getElementsByClassName('linkMenu')

    burger.addEventListener("click", () => {
      book.classList.toggle("open");
      sideNav.classList.toggle("open");
      overlay.classList.toggle("open");
    });

    overlay.addEventListener("click", () => {
      burger.classList.remove("open");
      menu.classList.remove("open");
      overlay.classList.remove("open");
    });

    for (let i = 0; i < linkMenu.length; i++) {

      linkMenu[i].addEventListener("click", () => {
        burger.classList.remove("open");
        menu.classList.remove("open");
        overlay.classList.remove("open");
      });

    }
  </script>

  <body>

</html>";s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";